DECLARE @入力 TABLE(
	ID nvarchar(200),
	PARENT nvarchar(200)
);
INSERT INTO @入力
SELECT
		T.TABLE_CATALOG+'.'+T.TABLE_SCHEMA+'.'+T.TABLE_NAME ID
		,TC_1.TABLE_CATALOG+'.'+TC_1.TABLE_SCHEMA+'.'+TC_1.TABLE_NAME PARENT
FROM INFORMATION_SCHEMA.TABLES T
JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC_N
	ON  T.TABLE_CATALOG=TC_N.CONSTRAINT_CATALOG
	AND T.TABLE_SCHEMA=TC_N.CONSTRAINT_SCHEMA
	AND T.TABLE_NAME=TC_N.TABLE_NAME
LEFT JOIN INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS RC_N
	ON  TC_N.CONSTRAINT_CATALOG      =RC_N.CONSTRAINT_CATALOG
	AND TC_N.CONSTRAINT_SCHEMA       =RC_N.CONSTRAINT_SCHEMA
	AND TC_N.CONSTRAINT_NAME         =RC_N.CONSTRAINT_NAME
LEFT JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC_1
		ON RC_N.UNIQUE_CONSTRAINT_CATALOG=TC_1.CONSTRAINT_CATALOG
	AND RC_N.UNIQUE_CONSTRAINT_SCHEMA =TC_1.CONSTRAINT_SCHEMA
	AND RC_N.UNIQUE_CONSTRAINT_NAME   =TC_1.CONSTRAINT_NAME
WHERE T.TABLE_TYPE='BASE TABLE'
DECLARE @出力 TABLE(
	LEVEL INT,
	ID nvarchar(200),
	PARENT nvarchar(200),
	PRIMARY KEY(ID,PARENT)
)
INSERT INTO @出力 SELECT DISTINCT 0,ID,ISNULL(PARENT,'')FROM @入力 入力 WHERE NOT EXISTS(SELECT * FROM @入力 WHERE ID=入力.ID AND PARENT IS NOT NULL)
DELETE FROM @入力 WHERE PARENT IS NULL
DECLARE 入力CURSOR CURSOR FOR SELECT DISTINCT ID FROM @入力 ORDER BY ID
DECLARE @LEVEL INT=1
INSERT INTO @出力 SELECT DISTINCT 0,ID,ISNULL(PARENT,'')FROM @入力 入力 WHERE ID=PARENT
DELETE FROM @入力 WHERE ID=PARENT
--SELECT * FROM @入力 ORDER BY ID,PARENT
--SELECT * FROM @出力 ORDER BY LEVEL,ID,PARENT
WHILE 1=1 BEGIN
	OPEN 入力CURSOR
	DECLARE @作業した BIT=0
	WHILE 1=1 BEGIN
		DECLARE @ID NVARCHAR(400)
		FETCH NEXT FROM 入力CURSOR INTO @ID
		IF @@FETCH_STATUS<0 BREAK
		DECLARE @同一ID数 INT
		SELECT @同一ID数=COUNT(*)FROM(SELECT DISTINCT PARENT FROM @入力 WHERE ID=@ID)A
		DECLARE @確定ID数 INT
		SELECT @確定ID数=COUNT(*)FROM(
			SELECT DISTINCT 出力.ID,入力.PARENT
			FROM @出力 出力
			JOIN @入力 入力 ON 出力.ID=入力.PARENT
			WHERE 入力.ID=@ID
		)A
		IF @同一ID数=@確定ID数 BEGIN
			--子テーブルと親テーブルが同じ場合もある。TPC-HのSales.CurrencyRate→Sales.Currency
			INSERT INTO @出力 SELECT DISTINCT @LEVEL,ID,PARENT FROM @入力 WHERE ID=@ID
			DELETE FROM @入力 WHERE ID=@ID
			SET @作業した=1
			SET @LEVEL=@LEVEL+1
		END
	END
	CLOSE 入力CURSOR
	IF @作業した=0 BREAK
END
--SELECT * FROM @入力 ORDER BY ID,PARENT
SELECT DISTINCT LEVEL,ID FROM @出力 ORDER BY LEVEL,ID
--WHILE 1=1 BEGIN
--	OPEN 入力CURSOR
--	SET @作業した=0
--	WHILE 1=1 BEGIN
--		FETCH NEXT FROM 入力CURSOR INTO @ID
--		IF @@FETCH_STATUS<0 BREAK
--		SELECT @同一ID数=COUNT(*)FROM(SELECT DISTINCT PARENT FROM @入力 WHERE ID=@ID)A
--		SELECT @確定ID数=COUNT(*)FROM(
--			SELECT DISTINCT 出力.ID,入力.PARENT
--			FROM @出力 出力
--			JOIN @入力 入力 ON 出力.ID=入力.PARENT
--			WHERE 入力.ID=@ID
--		)A
--		--SELECT '入力'入力,ID,PARENT FROM @入力 WHERE ID=@ID
--		--SELECT DISTINCT '出力'出力,出力.ID,入力.PARENT
--		--	FROM @出力 出力
--		--	JOIN @入力 入力 ON 出力.ID=入力.PARENT
--		--	WHERE 入力.ID=@ID
--		--SELECT @ID,@同一ID数 同一ID数,@確定ID数 確定ID数
--		IF @同一ID数=@確定ID数 BEGIN
--			INSERT INTO @出力 SELECT @LEVEL,ID,PARENT FROM @入力 WHERE ID=@ID
--			DELETE FROM @入力 WHERE ID=@ID
--			SET @作業した=1
--			SET @LEVEL=@LEVEL+1
--		END
--	END
--	CLOSE 入力CURSOR
--	IF @作業した=0 BREAK
--END

--WHILE 1=1 BEGIN
--	OPEN 入力CURSOR
--	DECLARE @作業した BIT=0
--	WHILE 1=1 BEGIN
--		DECLARE @ID NVARCHAR(400)
--		FETCH NEXT FROM 入力CURSOR INTO @ID
--		IF @@FETCH_STATUS<0 BREAK
--		DECLARE 出力CURSOR CURSOR FOR SELECT ID FROM @出力
--		OPEN 出力CURSOR
--		WHILE 1=1 BEGIN
--			FETCH NEXT FROM 出力CURSOR INTO @ID
--			IF @@FETCH_STATUS<0 BREAK
--		END
--		CLOSE 出力CURSOR
--		DECLARE @同一ID数 INT
--		SELECT @同一ID数=COUNT(*)FROM @入力 WHERE ID=@ID
--		DECLARE @確定ID数 INT
--		SELECT @確定ID数=COUNT(*)FROM(
--			SELECT DISTINCT 出力.ID,入力.PARENT
--			FROM @出力 出力
--			JOIN @入力 入力 ON 出力.ID=入力.PARENT
--			WHERE 入力.ID=@ID
--		)A
--		IF @同一ID数=@確定ID数 BEGIN
--			INSERT INTO @出力 SELECT @LEVEL,ID,PARENT FROM @入力 WHERE ID=@ID
--			DELETE FROM @入力 WHERE ID=@ID
--			SET @作業した=1
--			SET @LEVEL=@LEVEL+1
--		END
--	END
--	CLOSE 入力CURSOR
--	IF @作業した=0 BREAK
--END
DEALLOCATE 入力CURSOR
--SELECT * FROM @入力 ORDER BY ID,PARENT
--SELECT * FROM @出力 ORDER BY LEVEL,ID,PARENT
--INSERT INTO @出力 SELECT DISTINCT @LEVEL,ID,ISNULL(PARENT,'')FROM @入力
--DELETE FROM @入力
--SELECT * FROM @入力 ORDER BY PARENT,ID
--SELECT * FROM @出力 ORDER BY LEVEL,ID,PARENT
