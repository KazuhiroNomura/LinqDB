
//------------------------------------------------------------------------------
// <auto-generated>
//    このコードはテンプレートから生成されました。
//    このファイルを手動で変更すると、アプリケーションで予期しない動作が発生する可能性があります。
//    このファイルに対する手動の変更は、コードが再生成されると上書きされます。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Globalization;
using System.IO;
using System.Text;
using System.Xml;
using Lite;
using Lite.Sets;
using Lite.CRC;
using Lite.Databases;
#pragma warning disable 661                              // ==,!=は定義されているのにGetHashCodeが定義されていない警告。無効化。
#pragma warning disable CS0659                           // 型は Object.Equals(object o) をオーバーライドしますが、Object.GetHashCode() をオーバーライドしません。無効化。
// ReSharper disable UnusedMember.Global                 使われていないメンバーは削除する。無効化。
// ReSharper disable FieldCanBeMadeReadOnly.Global       フィールドはreadonlyを推奨する。無効化。
// ReSharper disable PartialTypeWithSinglePart           partialは必要会い。無効化。
// ReSharper disable RedundantNameQualifier              Int32→intのような省略形を推奨。無効化。
// ReSharper disable PossibleNullReferenceException      nullチェックを推奨。無効化。
// ReSharper disable MemberCanBePrivate.Global           privateを推奨。無効化。
// ReSharper disable ClassNeverInstantiated.Global       インスタンス化されたけど使われていない。無効化。
// ReSharper disable PossibleInvalidOperationException   引数名を推奨。無効化。
// ReSharper disable ConvertNullableToShortForm          完全型名を推奨。無効化。
// ReSharper disable MemberCanBeProtected.Global         protectedに推奨。無効化。
// ReSharper disable ConvertIfStatementToReturnStatement ifとreturnを?:に推奨。無効化。
// ReSharper disable RedundantOverriddenMember           overrideでbaseメソッド呼んでいるだけで削除推奨。無効化。
// ReSharper disable UnusedVariable                      Relationshipメソッドでローカルに代入して使わなかった代入文削除推奨。無効化。
namespace CoverageCS.Lite.CRC.作りたい仕様確認.Set{
    [Serializable]
    public partial class SetEntities:Container<SetEntities>{
        public AssociationSet<多1多2,Key.多1,多1,Key.多2,多2,SetEntities>多1多2{get;private set;}
        public Set<abstract_class,Key.abstract_class,SetEntities> abstract_class{get;private set;}
        internal Set<internal_class,Key.internal_class,SetEntities> internal_class{get;private set;}
        public Set<多1,Key.多1,SetEntities> 多1{get;private set;}
        public Set<多2,Key.多2,SetEntities> 多2{get;private set;}
        public Set<table1,Key.table1,SetEntities> table1{get;private set;}
        public Set<table2,Key.table2,SetEntities> table2{get;private set;}
        public Set<StringTable,Key.StringTable,SetEntities> StringTable{get;private set;}
        public Set<class1,Key.class1,SetEntities> class1{get;private set;}
        public Set<リレーションシップの重ね合わせ親1,Key.リレーションシップの重ね合わせ親1,SetEntities> リレーションシップの重ね合わせ親1Set{get;private set;}
        public Set<リレーションシップの重ね合わせ1,Key.リレーションシップの重ね合わせ1,SetEntities> リレーションシップの重ね合わせ1Set{get;private set;}
        public Set<リレーションシップの重ね合わせ2,Key.リレーションシップの重ね合わせ2,SetEntities> リレーションシップの重ね合わせ2Set{get;private set;}
        public Set<Entity1,Key.Entity1,SetEntities> Entity1Set{get;private set;}
        public override SetEntities Transaction(){
            var Container=new SetEntities(this);
            this.Copy(Container);
            return Container;
        }
        public SetEntities():base(default(SetEntities))=>this.Init();
        public SetEntities(SetEntities Parent):base(Parent)=>this.Init();
        public SetEntities(Stream Stream,XmlDictionaryReader Reader,XmlDictionaryWriter Writer):base(Stream,Reader,Writer){}
        protected override void Init(){
            this.多1多2=new AssociationSet<多1多2,Key.多1,多1,Key.多2,多2,SetEntities>(this);
            this.abstract_class=new Set<abstract_class,Key.abstract_class,SetEntities>(this);
            this.internal_class=new Set<internal_class,Key.internal_class,SetEntities>(this);
            this.多1=new Set<多1,Key.多1,SetEntities>(this);
            this.多2=new Set<多2,Key.多2,SetEntities>(this);
            this.table1=new Set<table1,Key.table1,SetEntities>(this);
            this.table2=new Set<table2,Key.table2,SetEntities>(this);
            this.StringTable=new Set<StringTable,Key.StringTable,SetEntities>(this);
            this.class1=new Set<class1,Key.class1,SetEntities>(this);
            this.リレーションシップの重ね合わせ親1Set=new Set<リレーションシップの重ね合わせ親1,Key.リレーションシップの重ね合わせ親1,SetEntities>(this);
            this.リレーションシップの重ね合わせ1Set=new Set<リレーションシップの重ね合わせ1,Key.リレーションシップの重ね合わせ1,SetEntities>(this);
            this.リレーションシップの重ね合わせ2Set=new Set<リレーションシップの重ね合わせ2,Key.リレーションシップの重ね合わせ2,SetEntities>(this);
            this.Entity1Set=new Set<Entity1,Key.Entity1,SetEntities>(this);
        }
        protected override void Read(XmlDictionaryReader Reader){
            this.多1多2.Read(Reader);
            this.abstract_class.Read(Reader);
            this.internal_class.Read(Reader);
            this.多1.Read(Reader);
            this.多2.Read(Reader);
            this.table1.Read(Reader);
            this.table2.Read(Reader);
            this.StringTable.Read(Reader);
            this.class1.Read(Reader);
            this.リレーションシップの重ね合わせ親1Set.Read(Reader);
            this.リレーションシップの重ね合わせ1Set.Read(Reader);
            this.リレーションシップの重ね合わせ2Set.Read(Reader);
            this.Entity1Set.Read(Reader);
        }
        protected override void Write(XmlDictionaryWriter Writer){
            this.多1多2.Write(Writer);
            this.abstract_class.Write(Writer);
            this.internal_class.Write(Writer);
            this.多1.Write(Writer);
            this.多2.Write(Writer);
            this.table1.Write(Writer);
            this.table2.Write(Writer);
            this.StringTable.Write(Writer);
            this.class1.Write(Writer);
            this.リレーションシップの重ね合わせ親1Set.Write(Writer);
            this.リレーションシップの重ね合わせ1Set.Write(Writer);
            this.リレーションシップの重ね合わせ2Set.Write(Writer);
            this.Entity1Set.Write(Writer);
        }
        protected override void Copy(SetEntities To){
            To.多1多2.Assign(this.多1多2);
            To.abstract_class.Assign(this.abstract_class);
            To.internal_class.Assign(this.internal_class);
            To.多1.Assign(this.多1);
            To.多2.Assign(this.多2);
            To.table1.Assign(this.table1);
            To.table2.Assign(this.table2);
            To.StringTable.Assign(this.StringTable);
            To.class1.Assign(this.class1);
            To.リレーションシップの重ね合わせ親1Set.Assign(this.リレーションシップの重ね合わせ親1Set);
            To.リレーションシップの重ね合わせ1Set.Assign(this.リレーションシップの重ね合わせ1Set);
            To.リレーションシップの重ね合わせ2Set.Assign(this.リレーションシップの重ね合わせ2Set);
            To.Entity1Set.Assign(this.Entity1Set);
        }
        protected override void Commit(XmlDictionaryWriter Writer){
            this.多1多2.Write(Writer);
            this.abstract_class.Write(Writer);
            this.internal_class.Write(Writer);
            this.多1.Write(Writer);
            this.多2.Write(Writer);
            this.table1.Write(Writer);
            this.table2.Write(Writer);
            this.StringTable.Write(Writer);
            this.class1.Write(Writer);
            this.リレーションシップの重ね合わせ親1Set.Write(Writer);
            this.リレーションシップの重ね合わせ1Set.Write(Writer);
            this.リレーションシップの重ね合わせ2Set.Write(Writer);
            this.Entity1Set.Write(Writer);
        }
        protected override void UpdateRelationship(){
            this.abstract_class.UpdateRelationship();
            this.internal_class.UpdateRelationship();
            this.多1.UpdateRelationship();
            this.多2.UpdateRelationship();
            this.table1.UpdateRelationship();
            this.table2.UpdateRelationship();
            this.StringTable.UpdateRelationship();
            this.class1.UpdateRelationship();
            this.リレーションシップの重ね合わせ親1Set.UpdateRelationship();
            this.リレーションシップの重ね合わせ1Set.UpdateRelationship();
            this.リレーションシップの重ね合わせ2Set.UpdateRelationship();
            this.Entity1Set.UpdateRelationship();
        }
        public override void RelationValidate(){
            var 多1多2=this.多1多2;
            var abstract_class=this.abstract_class;
            var internal_class=this.internal_class;
            var 多1=this.多1;
            var 多2=this.多2;
            var table1=this.table1;
            var table2=this.table2;
            var StringTable=this.StringTable;
            var class1=this.class1;
            var リレーションシップの重ね合わせ親1Set=this.リレーションシップの重ね合わせ親1Set;
            var リレーションシップの重ね合わせ1Set=this.リレーションシップの重ね合わせ1Set;
            var リレーションシップの重ね合わせ2Set=this.リレーションシップの重ね合わせ2Set;
            var Entity1Set=this.Entity1Set;
            //アソシエーションがエンティティに存在すること
            foreach(var a in 多1多2){
                if(!this.多1.ContainsKey(a.多1End1のロール名.PrimaryKey))throw new RelationshipException("\"多1多2\"の多1多2.多1End1のロール名\"に対応する\"多1.PrimaryKey\"が無かった");
                if(!this.多2.ContainsKey(a.多2End2のロール名.PrimaryKey))throw new RelationshipException("\"多1多2\"の多1多2.多2End2のロール名\"に対応する\"多2.PrimaryKey\"が無かった");
            }
            //多対１
            foreach(var a in table2){
                if(!table1.ContainsKey(a.table1table2))throw new RelationshipException("外部キーtable1table2に対応するtable1.PrimaryKeyが無かった");
            }
            foreach(var a in リレーションシップの重ね合わせ親1Set){
                if(!リレーションシップの重ね合わせ1Set.ContainsKey(a.AssociationOneリレーションシップの重ね合わせ1Manyリレーションシップの重ね合わせ親1))throw new RelationshipException("外部キーAssociationOneリレーションシップの重ね合わせ1Manyリレーションシップの重ね合わせ親1に対応するリレーションシップの重ね合わせ1.PrimaryKeyが無かった");
            }
            foreach(var a in リレーションシップの重ね合わせ親1Set){
                if(!リレーションシップの重ね合わせ2Set.ContainsKey(a.AssociationOneリレーションシップの重ね合わせ2Manyリレーションシップの重ね合わせ親1))throw new RelationshipException("外部キーAssociationOneリレーションシップの重ね合わせ2Manyリレーションシップの重ね合わせ親1に対応するリレーションシップの重ね合わせ2.PrimaryKeyが無かった");
            }
        }
    }
    namespace Key{
        [Serializable]
        public struct abstract_class:IEquatable<abstract_class>{
            public global::System.Int32 ID{get;}
            public abstract_class(global::System.Int32 ID){
                this.ID=ID;
            }
            internal void ToStringBuilder(StringBuilder sb){
                sb.Append(nameof(ID)+"="+this.ID);
            }
            public override string ToString(){
                var sb=new StringBuilder();
                this.ToStringBuilder(sb);
                return sb.ToString();
            }
            internal void InputHashCode(ref CRC32 CRC){
                CRC.Input(this.ID);
            }
            public override int GetHashCode()=>this.ID;
            public bool Equals(abstract_class other){
                if(!this.ID.Equals(other.ID))return false;
                return true;
            }
            public override bool Equals(Object obj)=>this.Equals((abstract_class)obj);
            public static bool operator==(abstract_class x,abstract_class y)=> x.Equals(y);
            public static bool operator!=(abstract_class x,abstract_class y)=>!x.Equals(y);
        }
        [Serializable]
        public struct internal_class:IEquatable<internal_class>{
            public global::System.Int32 ID{get;}
            public internal_class(global::System.Int32 ID){
                this.ID=ID;
            }
            internal void ToStringBuilder(StringBuilder sb){
                sb.Append(nameof(ID)+"="+this.ID);
            }
            public override string ToString(){
                var sb=new StringBuilder();
                this.ToStringBuilder(sb);
                return sb.ToString();
            }
            internal void InputHashCode(ref CRC32 CRC){
                CRC.Input(this.ID);
            }
            public override int GetHashCode()=>this.ID;
            public bool Equals(internal_class other){
                if(!this.ID.Equals(other.ID))return false;
                return true;
            }
            public override bool Equals(Object obj)=>this.Equals((internal_class)obj);
            public static bool operator==(internal_class x,internal_class y)=> x.Equals(y);
            public static bool operator!=(internal_class x,internal_class y)=>!x.Equals(y);
        }
        [Serializable]
        public struct 多1:IEquatable<多1>{
            public global::System.Int32 ID1{get;}
            public global::System.Int32 ID2{get;}
            public 多1(global::System.Int32 ID1,global::System.Int32 ID2){
                this.ID1=ID1;
                this.ID2=ID2;
            }
            internal void ToStringBuilder(StringBuilder sb){
                sb.Append(nameof(ID1)+"="+this.ID1+",");
                sb.Append(nameof(ID2)+"="+this.ID2);
            }
            public override string ToString(){
                var sb=new StringBuilder();
                this.ToStringBuilder(sb);
                return sb.ToString();
            }
            internal void InputHashCode(ref CRC32 CRC){
                CRC.Input(this.ID1);
                CRC.Input(this.ID2);
            }
            public override int GetHashCode(){
                var CRC=new CRC32();
                CRC.Input(this.ID1);
                CRC.Input(this.ID2);
                return CRC.GetHashCode();
            }
            public bool Equals(多1 other){
                if(!this.ID1.Equals(other.ID1))return false;
                if(!this.ID2.Equals(other.ID2))return false;
                return true;
            }
            public override bool Equals(Object obj)=>this.Equals((多1)obj);
            public static bool operator==(多1 x,多1 y)=> x.Equals(y);
            public static bool operator!=(多1 x,多1 y)=>!x.Equals(y);
        }
        [Serializable]
        public struct 多2:IEquatable<多2>{
            public global::System.Int32 ID1{get;}
            public global::System.Int32 ID2{get;}
            public 多2(global::System.Int32 ID1,global::System.Int32 ID2){
                this.ID1=ID1;
                this.ID2=ID2;
            }
            internal void ToStringBuilder(StringBuilder sb){
                sb.Append(nameof(ID1)+"="+this.ID1+",");
                sb.Append(nameof(ID2)+"="+this.ID2);
            }
            public override string ToString(){
                var sb=new StringBuilder();
                this.ToStringBuilder(sb);
                return sb.ToString();
            }
            internal void InputHashCode(ref CRC32 CRC){
                CRC.Input(this.ID1);
                CRC.Input(this.ID2);
            }
            public override int GetHashCode(){
                var CRC=new CRC32();
                CRC.Input(this.ID1);
                CRC.Input(this.ID2);
                return CRC.GetHashCode();
            }
            public bool Equals(多2 other){
                if(!this.ID1.Equals(other.ID1))return false;
                if(!this.ID2.Equals(other.ID2))return false;
                return true;
            }
            public override bool Equals(Object obj)=>this.Equals((多2)obj);
            public static bool operator==(多2 x,多2 y)=> x.Equals(y);
            public static bool operator!=(多2 x,多2 y)=>!x.Equals(y);
        }
        [Serializable]
        public struct table1:IEquatable<table1>{
            public global::System.Int32 ID{get;}
            public table1(global::System.Int32 ID){
                this.ID=ID;
            }
            internal void ToStringBuilder(StringBuilder sb){
                sb.Append(nameof(ID)+"="+this.ID);
            }
            public override string ToString(){
                var sb=new StringBuilder();
                this.ToStringBuilder(sb);
                return sb.ToString();
            }
            internal void InputHashCode(ref CRC32 CRC){
                CRC.Input(this.ID);
            }
            public override int GetHashCode()=>this.ID;
            public bool Equals(table1 other){
                if(!this.ID.Equals(other.ID))return false;
                return true;
            }
            public override bool Equals(Object obj)=>this.Equals((table1)obj);
            public static bool operator==(table1 x,table1 y)=> x.Equals(y);
            public static bool operator!=(table1 x,table1 y)=>!x.Equals(y);
        }
        [Serializable]
        public struct table2:IEquatable<table2>{
            public global::System.Int32 ID{get;}
            public table2(global::System.Int32 ID){
                this.ID=ID;
            }
            internal void ToStringBuilder(StringBuilder sb){
                sb.Append(nameof(ID)+"="+this.ID);
            }
            public override string ToString(){
                var sb=new StringBuilder();
                this.ToStringBuilder(sb);
                return sb.ToString();
            }
            internal void InputHashCode(ref CRC32 CRC){
                CRC.Input(this.ID);
            }
            public override int GetHashCode()=>this.ID;
            public bool Equals(table2 other){
                if(!this.ID.Equals(other.ID))return false;
                return true;
            }
            public override bool Equals(Object obj)=>this.Equals((table2)obj);
            public static bool operator==(table2 x,table2 y)=> x.Equals(y);
            public static bool operator!=(table2 x,table2 y)=>!x.Equals(y);
        }
        [Serializable]
        public struct StringTable:IEquatable<StringTable>{
            public global::System.Int32 ID{get;}
            public StringTable(global::System.Int32 ID){
                this.ID=ID;
            }
            internal void ToStringBuilder(StringBuilder sb){
                sb.Append(nameof(ID)+"="+this.ID);
            }
            public override string ToString(){
                var sb=new StringBuilder();
                this.ToStringBuilder(sb);
                return sb.ToString();
            }
            internal void InputHashCode(ref CRC32 CRC){
                CRC.Input(this.ID);
            }
            public override int GetHashCode()=>this.ID;
            public bool Equals(StringTable other){
                if(!this.ID.Equals(other.ID))return false;
                return true;
            }
            public override bool Equals(Object obj)=>this.Equals((StringTable)obj);
            public static bool operator==(StringTable x,StringTable y)=> x.Equals(y);
            public static bool operator!=(StringTable x,StringTable y)=>!x.Equals(y);
        }
        [Serializable]
        public struct class1:IEquatable<class1>{
            public global::System.Int32 Id{get;}
            public class1(global::System.Int32 Id){
                this.Id=Id;
            }
            internal void ToStringBuilder(StringBuilder sb){
                sb.Append(nameof(Id)+"="+this.Id);
            }
            public override string ToString(){
                var sb=new StringBuilder();
                this.ToStringBuilder(sb);
                return sb.ToString();
            }
            internal void InputHashCode(ref CRC32 CRC){
                CRC.Input(this.Id);
            }
            public override int GetHashCode()=>this.Id;
            public bool Equals(class1 other){
                if(!this.Id.Equals(other.Id))return false;
                return true;
            }
            public override bool Equals(Object obj)=>this.Equals((class1)obj);
            public static bool operator==(class1 x,class1 y)=> x.Equals(y);
            public static bool operator!=(class1 x,class1 y)=>!x.Equals(y);
        }
        [Serializable]
        public struct リレーションシップの重ね合わせ親1:IEquatable<リレーションシップの重ね合わせ親1>{
            public global::System.Int32 Id{get;}
            public global::System.String A{get;}
            public リレーションシップの重ね合わせ親1(global::System.Int32 Id,global::System.String A){
                this.Id=Id;
                this.A=A;
            }
            internal void ToStringBuilder(StringBuilder sb){
                sb.Append(nameof(Id)+"="+this.Id+",");
                sb.Append(nameof(A)+"="+this.A);
            }
            public override string ToString(){
                var sb=new StringBuilder();
                this.ToStringBuilder(sb);
                return sb.ToString();
            }
            internal void InputHashCode(ref CRC32 CRC){
                CRC.Input(this.Id);
                CRC.Input(this.A);
            }
            public override int GetHashCode(){
                var CRC=new CRC32();
                CRC.Input(this.Id);
                CRC.Input(this.A);
                return CRC.GetHashCode();
            }
            public bool Equals(リレーションシップの重ね合わせ親1 other){
                if(!this.Id.Equals(other.Id))return false;
                if(!this.A.Equals(other.A))return false;
                return true;
            }
            public override bool Equals(Object obj)=>this.Equals((リレーションシップの重ね合わせ親1)obj);
            public static bool operator==(リレーションシップの重ね合わせ親1 x,リレーションシップの重ね合わせ親1 y)=> x.Equals(y);
            public static bool operator!=(リレーションシップの重ね合わせ親1 x,リレーションシップの重ね合わせ親1 y)=>!x.Equals(y);
        }
        [Serializable]
        public struct リレーションシップの重ね合わせ1:IEquatable<リレーションシップの重ね合わせ1>{
            public global::System.String A{get;}
            public global::System.String B{get;}
            public リレーションシップの重ね合わせ1(global::System.String A,global::System.String B){
                this.A=A;
                this.B=B;
            }
            internal void ToStringBuilder(StringBuilder sb){
                sb.Append(nameof(A)+"="+this.A+",");
                sb.Append(nameof(B)+"="+this.B);
            }
            public override string ToString(){
                var sb=new StringBuilder();
                this.ToStringBuilder(sb);
                return sb.ToString();
            }
            internal void InputHashCode(ref CRC32 CRC){
                CRC.Input(this.A);
                CRC.Input(this.B);
            }
            public override int GetHashCode(){
                var CRC=new CRC32();
                CRC.Input(this.A);
                CRC.Input(this.B);
                return CRC.GetHashCode();
            }
            public bool Equals(リレーションシップの重ね合わせ1 other){
                if(!this.A.Equals(other.A))return false;
                if(!this.B.Equals(other.B))return false;
                return true;
            }
            public override bool Equals(Object obj)=>this.Equals((リレーションシップの重ね合わせ1)obj);
            public static bool operator==(リレーションシップの重ね合わせ1 x,リレーションシップの重ね合わせ1 y)=> x.Equals(y);
            public static bool operator!=(リレーションシップの重ね合わせ1 x,リレーションシップの重ね合わせ1 y)=>!x.Equals(y);
        }
        [Serializable]
        public struct リレーションシップの重ね合わせ2:IEquatable<リレーションシップの重ね合わせ2>{
            public global::System.String B{get;}
            public global::System.String C{get;}
            public リレーションシップの重ね合わせ2(global::System.String B,global::System.String C){
                this.B=B;
                this.C=C;
            }
            internal void ToStringBuilder(StringBuilder sb){
                sb.Append(nameof(B)+"="+this.B+",");
                sb.Append(nameof(C)+"="+this.C);
            }
            public override string ToString(){
                var sb=new StringBuilder();
                this.ToStringBuilder(sb);
                return sb.ToString();
            }
            internal void InputHashCode(ref CRC32 CRC){
                CRC.Input(this.B);
                CRC.Input(this.C);
            }
            public override int GetHashCode(){
                var CRC=new CRC32();
                CRC.Input(this.B);
                CRC.Input(this.C);
                return CRC.GetHashCode();
            }
            public bool Equals(リレーションシップの重ね合わせ2 other){
                if(!this.B.Equals(other.B))return false;
                if(!this.C.Equals(other.C))return false;
                return true;
            }
            public override bool Equals(Object obj)=>this.Equals((リレーションシップの重ね合わせ2)obj);
            public static bool operator==(リレーションシップの重ね合わせ2 x,リレーションシップの重ね合わせ2 y)=> x.Equals(y);
            public static bool operator!=(リレーションシップの重ね合わせ2 x,リレーションシップの重ね合わせ2 y)=>!x.Equals(y);
        }
        [Serializable]
        public struct Entity1:IEquatable<Entity1>{
            public global::System.String D{get;}
            public Entity1(global::System.String D){
                this.D=D;
            }
            internal void ToStringBuilder(StringBuilder sb){
                sb.Append(nameof(D)+"="+this.D);
            }
            public override string ToString(){
                var sb=new StringBuilder();
                this.ToStringBuilder(sb);
                return sb.ToString();
            }
            internal void InputHashCode(ref CRC32 CRC){
                CRC.Input(this.D);
            }
            public override int GetHashCode()=>this.D.GetHashCode();
            public bool Equals(Entity1 other){
                if(!this.D.Equals(other.D))return false;
                return true;
            }
            public override bool Equals(Object obj)=>this.Equals((Entity1)obj);
            public static bool operator==(Entity1 x,Entity1 y)=> x.Equals(y);
            public static bool operator!=(Entity1 x,Entity1 y)=>!x.Equals(y);
        }
    }
    //Entity
    [Serializable]
    public abstract class abstract_class:global::Lite.Sets.EntityBase<Key.abstract_class,SetEntities>{
        public global::System.Int32 ID=>this.PrimaryKey.ID;
        //値コンストラクタ
        protected abstract_class(global::System.Int32 ID):base(new Key.abstract_class(ID)){
        }
        public override int GetHashCode()=>this.PrimaryKey.GetHashCode();
        public override string ToString(){
            var sb=new StringBuilder();
            this.ToStringBuilder(sb);
            return sb.ToString();
        }
        internal virtual void ToStringBuilder(StringBuilder sb){
            this.PrimaryKey.ToStringBuilder(sb);
            sb.Append(","+nameof(ID)+"="+this.ID);
        }
        public override bool Equals(object obj)=>this.ProtectedEquals(obj as abstract_class);
        protected bool ProtectedEquals(abstract_class other){
            if(other is null)return false;
            if(!this.PrimaryKey.Equals(other.PrimaryKey))return false;
            if(!this.ID.Equals(other.ID))return false;
            return true;
        }
        public override void AddRelationship(SetEntities Container){
        }
        public override void ConcurrentAddRelationship(SetEntities Container){
        }
        public override void RemoveRelationship(SetEntities Container){
        }
        public override void ConcurrentRemoveRelationship(SetEntities Container){
        }
    }
    //Entity
    [Serializable]
    public class internal_class:global::Lite.Sets.EntityBase<Key.internal_class,SetEntities>{
        public global::System.Int32 ID=>this.PrimaryKey.ID;
        //値コンストラクタ
        public internal_class(global::System.Int32 ID):base(new Key.internal_class(ID)){
        }
        public override int GetHashCode()=>this.PrimaryKey.GetHashCode();
        public override string ToString(){
            var sb=new StringBuilder();
            this.ToStringBuilder(sb);
            return sb.ToString();
        }
        internal virtual void ToStringBuilder(StringBuilder sb){
            this.PrimaryKey.ToStringBuilder(sb);
            sb.Append(","+nameof(ID)+"="+this.ID);
        }
        public override bool Equals(object obj)=>this.ProtectedEquals(obj as internal_class);
        protected bool ProtectedEquals(internal_class other){
            if(other is null)return false;
            if(!this.PrimaryKey.Equals(other.PrimaryKey))return false;
            if(!this.ID.Equals(other.ID))return false;
            return true;
        }
        public override void AddRelationship(SetEntities Container){
        }
        public override void ConcurrentAddRelationship(SetEntities Container){
        }
        public override void RemoveRelationship(SetEntities Container){
        }
        public override void ConcurrentRemoveRelationship(SetEntities Container){
        }
    }
    //Entity
    [Serializable]
    public sealed class 多1:global::Lite.Sets.EntityBase<Key.多1,SetEntities>,IEquatable<多1>{
        public global::System.Int32 ID1=>this.PrimaryKey.ID1;
        public global::System.Int32 ID2=>this.PrimaryKey.ID2;
        public global::System.Int32 Property1{get;}
        //値コンストラクタ
        public 多1(global::System.Int32 ID1,global::System.Int32 ID2,global::System.Int32 Property1):base(new Key.多1(ID1,ID2)){
            this.Property1=Property1;
        }
        public override int GetHashCode()=>this.PrimaryKey.GetHashCode();
        public override string ToString(){
            var sb=new StringBuilder();
            this.ToStringBuilder(sb);
            return sb.ToString();
        }
        internal void ToStringBuilder(StringBuilder sb){
            this.PrimaryKey.ToStringBuilder(sb);
            sb.Append(","+nameof(ID1)+"="+this.ID1);
            sb.Append(","+nameof(ID2)+"="+this.ID2);
            sb.Append(","+nameof(Property1)+"="+this.Property1);
        }
        public static bool operator==(多1 a,多1 b)=>a?.Equals(b)??b is null;
        public static bool operator!=(多1 a,多1 b)=>!(a==b);
        public override bool Equals(object other)=>this.Equals(other as 多1);
        public bool Equals(多1 other){
            if(other is null)return false;
            if(!this.PrimaryKey.Equals(other.PrimaryKey))return false;
            if(!this.ID1.Equals(other.ID1))return false;
            if(!this.ID2.Equals(other.ID2))return false;
            if(!this.Property1.Equals(other.Property1))return false;
            return true;
        }
        public override void AddRelationship(SetEntities Container){
        }
        public override void ConcurrentAddRelationship(SetEntities Container){
        }
        public override void RemoveRelationship(SetEntities Container){
        }
        public override void ConcurrentRemoveRelationship(SetEntities Container){
        }
        //多2End1ナビゲーションプロパティ(NavigationProperty)
        internal readonly Set<多2>_多2End1ナビゲーションプロパティ=new Set<多2>();
        public ASet<多2>多2End1ナビゲーションプロパティ=>this._多2End1ナビゲーションプロパティ;
    }
    //Entity
    [Serializable]
    public sealed class 多2:global::Lite.Sets.EntityBase<Key.多2,SetEntities>,IEquatable<多2>{
        public global::System.Int32 ID1=>this.PrimaryKey.ID1;
        public global::System.Int32 ID2=>this.PrimaryKey.ID2;
        public global::System.Int32 Property2{get;}
        //値コンストラクタ
        public 多2(global::System.Int32 ID1,global::System.Int32 ID2,global::System.Int32 Property2):base(new Key.多2(ID1,ID2)){
            this.Property2=Property2;
        }
        public override int GetHashCode()=>this.PrimaryKey.GetHashCode();
        public override string ToString(){
            var sb=new StringBuilder();
            this.ToStringBuilder(sb);
            return sb.ToString();
        }
        internal void ToStringBuilder(StringBuilder sb){
            this.PrimaryKey.ToStringBuilder(sb);
            sb.Append(","+nameof(ID1)+"="+this.ID1);
            sb.Append(","+nameof(ID2)+"="+this.ID2);
            sb.Append(","+nameof(Property2)+"="+this.Property2);
        }
        public static bool operator==(多2 a,多2 b)=>a?.Equals(b)??b is null;
        public static bool operator!=(多2 a,多2 b)=>!(a==b);
        public override bool Equals(object other)=>this.Equals(other as 多2);
        public bool Equals(多2 other){
            if(other is null)return false;
            if(!this.PrimaryKey.Equals(other.PrimaryKey))return false;
            if(!this.ID1.Equals(other.ID1))return false;
            if(!this.ID2.Equals(other.ID2))return false;
            if(!this.Property2.Equals(other.Property2))return false;
            return true;
        }
        public override void AddRelationship(SetEntities Container){
        }
        public override void ConcurrentAddRelationship(SetEntities Container){
        }
        public override void RemoveRelationship(SetEntities Container){
        }
        public override void ConcurrentRemoveRelationship(SetEntities Container){
        }
        //多1End2ナビゲーションプロパティ(NavigationProperty)
        internal readonly Set<多1>_多1End2ナビゲーションプロパティ=new Set<多1>();
        public ASet<多1>多1End2ナビゲーションプロパティ=>this._多1End2ナビゲーションプロパティ;
    }
    //Entity
    [Serializable]
    public sealed class table1:global::Lite.Sets.EntityBase<Key.table1,SetEntities>,IEquatable<table1>{
        public global::System.Int32 ID=>this.PrimaryKey.ID;
        //値コンストラクタ
        public table1(global::System.Int32 ID):base(new Key.table1(ID)){
        }
        public override int GetHashCode()=>this.PrimaryKey.GetHashCode();
        public override string ToString(){
            var sb=new StringBuilder();
            this.ToStringBuilder(sb);
            return sb.ToString();
        }
        internal void ToStringBuilder(StringBuilder sb){
            this.PrimaryKey.ToStringBuilder(sb);
            sb.Append(","+nameof(ID)+"="+this.ID);
        }
        public static bool operator==(table1 a,table1 b)=>a?.Equals(b)??b is null;
        public static bool operator!=(table1 a,table1 b)=>!(a==b);
        public override bool Equals(object other)=>this.Equals(other as table1);
        public bool Equals(table1 other){
            if(other is null)return false;
            if(!this.PrimaryKey.Equals(other.PrimaryKey))return false;
            if(!this.ID.Equals(other.ID))return false;
            return true;
        }
        public override void AddRelationship(SetEntities Container){
        }
        public override void ConcurrentAddRelationship(SetEntities Container){
        }
        public override void RemoveRelationship(SetEntities Container){
        }
        public override void ConcurrentRemoveRelationship(SetEntities Container){
        }
        //fk_table2(NavigationProperty)
        //IFrom,UTo
        //リレーションシップ
        //1→*
        [NonSerialized]
        internal readonly Set<table2>_fk_table2=new Set<table2>();
        public ASet<table2>fk_table2=>this._fk_table2;
    }
    //Entity
    [Serializable]
    public sealed class table2:global::Lite.Sets.EntityBase<Key.table2,SetEntities>,IEquatable<table2>{
        public global::System.Int32 ID=>this.PrimaryKey.ID;
        public global::System.Int32 table1{get;}
        //値コンストラクタ
        public table2(global::System.Int32 ID,global::System.Int32 table1):base(new Key.table2(ID)){
            this.table1=table1;
        }
        public override int GetHashCode()=>this.PrimaryKey.GetHashCode();
        public override string ToString(){
            var sb=new StringBuilder();
            this.ToStringBuilder(sb);
            return sb.ToString();
        }
        internal void ToStringBuilder(StringBuilder sb){
            this.PrimaryKey.ToStringBuilder(sb);
            sb.Append(","+nameof(ID)+"="+this.ID);
            sb.Append(","+nameof(table1)+"="+this.table1);
        }
        public static bool operator==(table2 a,table2 b)=>a?.Equals(b)??b is null;
        public static bool operator!=(table2 a,table2 b)=>!(a==b);
        public override bool Equals(object other)=>this.Equals(other as table2);
        public bool Equals(table2 other){
            if(other is null)return false;
            if(!this.PrimaryKey.Equals(other.PrimaryKey))return false;
            if(!this.ID.Equals(other.ID))return false;
            if(!this.table1.Equals(other.table1))return false;
            return true;
        }
        public override void AddRelationship(SetEntities Container){
            (this.fk_table1=Container.table1.GetReference<table1>(new Key.table1(this.table1)))._fk_table2.VoidAdd(this);
        }
        public override void ConcurrentAddRelationship(SetEntities Container){
            (this.fk_table1=Container.table1.GetReference<table1>(new Key.table1(this.table1)))._fk_table2.ConcurrentVoidAdd(this);
        }
        public override void RemoveRelationship(SetEntities Container){
            this.fk_table1._fk_table2.Remove(this);
        }
        public override void ConcurrentRemoveRelationship(SetEntities Container){
            this.fk_table1._fk_table2.ConcurrentRemove(this);
        }
        //fk_table1(NavigationProperty)
        //ITo,UFrom
        //リレーションシップ
        //*→1
        [field: NonSerialized]
        public table1 fk_table1{get;private set;}
        //外部キー
        public Key.table1 table1table2=>this.fk_table1.PrimaryKey;
    }
    //Entity
    [Serializable]
    public class StringTable:global::Lite.Sets.EntityBase<Key.StringTable,SetEntities>{
        public global::System.Int32 ID=>this.PrimaryKey.ID;
        //値コンストラクタ
        public StringTable(global::System.Int32 ID):base(new Key.StringTable(ID)){
        }
        public override int GetHashCode()=>this.PrimaryKey.GetHashCode();
        public override string ToString(){
            var sb=new StringBuilder();
            this.ToStringBuilder(sb);
            return sb.ToString();
        }
        internal virtual void ToStringBuilder(StringBuilder sb){
            this.PrimaryKey.ToStringBuilder(sb);
            sb.Append(","+nameof(ID)+"="+this.ID);
        }
        public override bool Equals(object obj)=>this.ProtectedEquals(obj as StringTable);
        protected bool ProtectedEquals(StringTable other){
            if(other is null)return false;
            if(!this.PrimaryKey.Equals(other.PrimaryKey))return false;
            if(!this.ID.Equals(other.ID))return false;
            return true;
        }
        public override void AddRelationship(SetEntities Container){
        }
        public override void ConcurrentAddRelationship(SetEntities Container){
        }
        public override void RemoveRelationship(SetEntities Container){
        }
        public override void ConcurrentRemoveRelationship(SetEntities Container){
        }
    }
    //Entity
    [Serializable]
    public class class1:global::Lite.Sets.EntityBase<Key.class1,SetEntities>{
        public global::System.Int32 Id=>this.PrimaryKey.Id;
        //値コンストラクタ
        public class1(global::System.Int32 Id):base(new Key.class1(Id)){
        }
        public override int GetHashCode()=>this.PrimaryKey.GetHashCode();
        public override string ToString(){
            var sb=new StringBuilder();
            this.ToStringBuilder(sb);
            return sb.ToString();
        }
        internal virtual void ToStringBuilder(StringBuilder sb){
            this.PrimaryKey.ToStringBuilder(sb);
            sb.Append(","+nameof(Id)+"="+this.Id);
        }
        public override bool Equals(object obj)=>this.ProtectedEquals(obj as class1);
        protected bool ProtectedEquals(class1 other){
            if(other is null)return false;
            if(!this.PrimaryKey.Equals(other.PrimaryKey))return false;
            if(!this.Id.Equals(other.Id))return false;
            return true;
        }
        public override void AddRelationship(SetEntities Container){
        }
        public override void ConcurrentAddRelationship(SetEntities Container){
        }
        public override void RemoveRelationship(SetEntities Container){
        }
        public override void ConcurrentRemoveRelationship(SetEntities Container){
        }
    }
    //Entity
    [Serializable]
    public class リレーションシップの重ね合わせ親1:global::Lite.Sets.EntityBase<Key.リレーションシップの重ね合わせ親1,SetEntities>{
        public global::System.Int32 Id=>this.PrimaryKey.Id;
        public global::System.String A=>this.PrimaryKey.A;
        public global::System.String B{get;}
        public global::System.String C{get;}
        //値コンストラクタ
        public リレーションシップの重ね合わせ親1(global::System.Int32 Id,global::System.String A,global::System.String B,global::System.String C):base(new Key.リレーションシップの重ね合わせ親1(Id,A)){
            this.B=B;
            this.C=C;
        }
        public override int GetHashCode()=>this.PrimaryKey.GetHashCode();
        public override string ToString(){
            var sb=new StringBuilder();
            this.ToStringBuilder(sb);
            return sb.ToString();
        }
        internal virtual void ToStringBuilder(StringBuilder sb){
            this.PrimaryKey.ToStringBuilder(sb);
            sb.Append(","+nameof(Id)+"="+this.Id);
            sb.Append(","+nameof(A)+"="+this.A);
            sb.Append(","+nameof(B)+"="+this.B);
            sb.Append(","+nameof(C)+"="+this.C);
        }
        public override bool Equals(object obj)=>this.ProtectedEquals(obj as リレーションシップの重ね合わせ親1);
        protected bool ProtectedEquals(リレーションシップの重ね合わせ親1 other){
            if(other is null)return false;
            if(!this.PrimaryKey.Equals(other.PrimaryKey))return false;
            if(!this.Id.Equals(other.Id))return false;
            if(!this.A.Equals(other.A))return false;
            if(!this.B.Equals(other.B))return false;
            if(!this.C.Equals(other.C))return false;
            return true;
        }
        public override void AddRelationship(SetEntities Container){
            (this.NavigationPropertyOneリレーションシップの重ね合わせ1=Container.リレーションシップの重ね合わせ1Set.GetReference<リレーションシップの重ね合わせ1>(new Key.リレーションシップの重ね合わせ1(this.A,this.B)))._NavigationPropertyリレーションシップの重ね合わせ親.VoidAdd(this);
            (this.NavigationPropertyリレーションシップの重ね合わせ2=Container.リレーションシップの重ね合わせ2Set.GetReference<リレーションシップの重ね合わせ2>(new Key.リレーションシップの重ね合わせ2(this.B,this.C)))._NavigationPropertyリレーションシップの重ね合わせ親1.VoidAdd(this);
        }
        public override void ConcurrentAddRelationship(SetEntities Container){
            (this.NavigationPropertyOneリレーションシップの重ね合わせ1=Container.リレーションシップの重ね合わせ1Set.GetReference<リレーションシップの重ね合わせ1>(new Key.リレーションシップの重ね合わせ1(this.A,this.B)))._NavigationPropertyリレーションシップの重ね合わせ親.ConcurrentVoidAdd(this);
            (this.NavigationPropertyリレーションシップの重ね合わせ2=Container.リレーションシップの重ね合わせ2Set.GetReference<リレーションシップの重ね合わせ2>(new Key.リレーションシップの重ね合わせ2(this.B,this.C)))._NavigationPropertyリレーションシップの重ね合わせ親1.ConcurrentVoidAdd(this);
        }
        public override void RemoveRelationship(SetEntities Container){
            this.NavigationPropertyOneリレーションシップの重ね合わせ1._NavigationPropertyリレーションシップの重ね合わせ親.Remove(this);
            this.NavigationPropertyリレーションシップの重ね合わせ2._NavigationPropertyリレーションシップの重ね合わせ親1.Remove(this);
        }
        public override void ConcurrentRemoveRelationship(SetEntities Container){
            this.NavigationPropertyOneリレーションシップの重ね合わせ1._NavigationPropertyリレーションシップの重ね合わせ親.ConcurrentRemove(this);
            this.NavigationPropertyリレーションシップの重ね合わせ2._NavigationPropertyリレーションシップの重ね合わせ親1.ConcurrentRemove(this);
        }
        //NavigationPropertyOneリレーションシップの重ね合わせ1(NavigationProperty)
        /// <summary>NavigationProperty概要リレーションシップの重ね合わせ1</summary>
        /// <remarks>NavigationProperty長い説明リレーションシップの重ね合わせ1</remarks>
        //ITo,UFrom
        //リレーションシップ
        //*→1
        [field: NonSerialized]
        public リレーションシップの重ね合わせ1 NavigationPropertyOneリレーションシップの重ね合わせ1{get;private set;}
        //外部キー
        public Key.リレーションシップの重ね合わせ1 AssociationOneリレーションシップの重ね合わせ1Manyリレーションシップの重ね合わせ親1=>this.NavigationPropertyOneリレーションシップの重ね合わせ1.PrimaryKey;
        //NavigationPropertyリレーションシップの重ね合わせ2(NavigationProperty)
        /// <summary>NavigationProperty概要リレーションシップの重ね合わせ2</summary>
        /// <remarks>NavigationProperty長い説明リレーションシップの重ね合わせ2</remarks>
        //ITo,UFrom
        //リレーションシップ
        //*→1
        [field: NonSerialized]
        public リレーションシップの重ね合わせ2 NavigationPropertyリレーションシップの重ね合わせ2{get;private set;}
        //外部キー
        public Key.リレーションシップの重ね合わせ2 AssociationOneリレーションシップの重ね合わせ2Manyリレーションシップの重ね合わせ親1=>this.NavigationPropertyリレーションシップの重ね合わせ2.PrimaryKey;
    }
    //Entity
    [Serializable]
    public sealed class リレーションシップの重ね合わせ1:global::Lite.Sets.EntityBase<Key.リレーションシップの重ね合わせ1,SetEntities>,IEquatable<リレーションシップの重ね合わせ1>{
        public global::System.String A=>this.PrimaryKey.A;
        public global::System.String B=>this.PrimaryKey.B;
        //値コンストラクタ
        public リレーションシップの重ね合わせ1(global::System.String A,global::System.String B):base(new Key.リレーションシップの重ね合わせ1(A,B)){
        }
        public override int GetHashCode()=>this.PrimaryKey.GetHashCode();
        public override string ToString(){
            var sb=new StringBuilder();
            this.ToStringBuilder(sb);
            return sb.ToString();
        }
        internal void ToStringBuilder(StringBuilder sb){
            this.PrimaryKey.ToStringBuilder(sb);
            sb.Append(","+nameof(A)+"="+this.A);
            sb.Append(","+nameof(B)+"="+this.B);
        }
        public static bool operator==(リレーションシップの重ね合わせ1 a,リレーションシップの重ね合わせ1 b)=>a?.Equals(b)??b is null;
        public static bool operator!=(リレーションシップの重ね合わせ1 a,リレーションシップの重ね合わせ1 b)=>!(a==b);
        public override bool Equals(object other)=>this.Equals(other as リレーションシップの重ね合わせ1);
        public bool Equals(リレーションシップの重ね合わせ1 other){
            if(other is null)return false;
            if(!this.PrimaryKey.Equals(other.PrimaryKey))return false;
            if(!this.A.Equals(other.A))return false;
            if(!this.B.Equals(other.B))return false;
            return true;
        }
        public override void AddRelationship(SetEntities Container){
        }
        public override void ConcurrentAddRelationship(SetEntities Container){
        }
        public override void RemoveRelationship(SetEntities Container){
        }
        public override void ConcurrentRemoveRelationship(SetEntities Container){
        }
        //NavigationPropertyリレーションシップの重ね合わせ親(NavigationProperty)
        /// <summary>NavigationProperty概要リレーションシップの重ね合わせ親</summary>
        /// <remarks>NavigationProperty長い説明リレーションシップの重ね合わせ親</remarks>
        //IFrom,UTo
        //リレーションシップ
        //1→*
        [NonSerialized]
        internal readonly Set<リレーションシップの重ね合わせ親1>_NavigationPropertyリレーションシップの重ね合わせ親=new Set<リレーションシップの重ね合わせ親1>();
        public ASet<リレーションシップの重ね合わせ親1>NavigationPropertyリレーションシップの重ね合わせ親=>this._NavigationPropertyリレーションシップの重ね合わせ親;
    }
    //Entity
    [Serializable]
    public class リレーションシップの重ね合わせ2:global::Lite.Sets.EntityBase<Key.リレーションシップの重ね合わせ2,SetEntities>{
        public global::System.String B=>this.PrimaryKey.B;
        public global::System.String C=>this.PrimaryKey.C;
        //値コンストラクタ
        public リレーションシップの重ね合わせ2(global::System.String B,global::System.String C):base(new Key.リレーションシップの重ね合わせ2(B,C)){
        }
        public override int GetHashCode()=>this.PrimaryKey.GetHashCode();
        public override string ToString(){
            var sb=new StringBuilder();
            this.ToStringBuilder(sb);
            return sb.ToString();
        }
        internal virtual void ToStringBuilder(StringBuilder sb){
            this.PrimaryKey.ToStringBuilder(sb);
            sb.Append(","+nameof(B)+"="+this.B);
            sb.Append(","+nameof(C)+"="+this.C);
        }
        public override bool Equals(object obj)=>this.ProtectedEquals(obj as リレーションシップの重ね合わせ2);
        protected bool ProtectedEquals(リレーションシップの重ね合わせ2 other){
            if(other is null)return false;
            if(!this.PrimaryKey.Equals(other.PrimaryKey))return false;
            if(!this.B.Equals(other.B))return false;
            if(!this.C.Equals(other.C))return false;
            return true;
        }
        public override void AddRelationship(SetEntities Container){
        }
        public override void ConcurrentAddRelationship(SetEntities Container){
        }
        public override void RemoveRelationship(SetEntities Container){
        }
        public override void ConcurrentRemoveRelationship(SetEntities Container){
        }
        //NavigationPropertyリレーションシップの重ね合わせ親1(NavigationProperty)
        /// <summary>NavigationProperty概要リレーションシップの重ね合わせ親1</summary>
        /// <remarks>NavigationProperty長い説明リレーションシップの重ね合わせ親1</remarks>
        //IFrom,UTo
        //リレーションシップ
        //1→*
        [NonSerialized]
        internal readonly Set<リレーションシップの重ね合わせ親1>_NavigationPropertyリレーションシップの重ね合わせ親1=new Set<リレーションシップの重ね合わせ親1>();
        public ASet<リレーションシップの重ね合わせ親1>NavigationPropertyリレーションシップの重ね合わせ親1=>this._NavigationPropertyリレーションシップの重ね合わせ親1;
    }
    //Entity
    [Serializable]
    public sealed class Entity1:global::Lite.Sets.EntityBase<Key.Entity1,SetEntities>,IEquatable<Entity1>{
        public global::System.String D=>this.PrimaryKey.D;
        //値コンストラクタ
        public Entity1(global::System.String D):base(new Key.Entity1(D)){
        }
        public override int GetHashCode()=>this.PrimaryKey.GetHashCode();
        public override string ToString(){
            var sb=new StringBuilder();
            this.ToStringBuilder(sb);
            return sb.ToString();
        }
        internal void ToStringBuilder(StringBuilder sb){
            this.PrimaryKey.ToStringBuilder(sb);
            sb.Append(","+nameof(D)+"="+this.D);
        }
        public static bool operator==(Entity1 a,Entity1 b)=>a?.Equals(b)??b is null;
        public static bool operator!=(Entity1 a,Entity1 b)=>!(a==b);
        public override bool Equals(object other)=>this.Equals(other as Entity1);
        public bool Equals(Entity1 other){
            if(other is null)return false;
            if(!this.PrimaryKey.Equals(other.PrimaryKey))return false;
            if(!this.D.Equals(other.D))return false;
            return true;
        }
        public override void AddRelationship(SetEntities Container){
        }
        public override void ConcurrentAddRelationship(SetEntities Container){
        }
        public override void RemoveRelationship(SetEntities Container){
        }
        public override void ConcurrentRemoveRelationship(SetEntities Container){
        }
        //NavigationPropertyリレーションシップの重ね合わせ21(NavigationProperty)
        /// <summary>NavigationProperty概要リレーションシップの重ね合わせ21</summary>
        /// <remarks>NavigationProperty長い説明リレーションシップの重ね合わせ21</remarks>
        internal readonly Set<リレーションシップの重ね合わせ21>_NavigationPropertyリレーションシップの重ね合わせ21=new Set<リレーションシップの重ね合わせ21>();
        public ASet<リレーションシップの重ね合わせ21>NavigationPropertyリレーションシップの重ね合わせ21=>this._NavigationPropertyリレーションシップの重ね合わせ21;
    }
    //Entity
    [Serializable]
    public sealed class リレーションシップの重ね合わせ21:リレーションシップの重ね合わせ2,IEquatable<リレーションシップの重ね合わせ21>{
        public global::System.String D{get;}
        //値コンストラクタ
        public リレーションシップの重ね合わせ21(global::System.String B,global::System.String C,global::System.String D):base(B:B,C:C){
            this.D=D;
        }
        internal override void ToStringBuilder(StringBuilder sb){
            base.ToStringBuilder(sb);
            sb.Append(","+nameof(D)+"="+this.D);
        }
        public static bool operator==(リレーションシップの重ね合わせ21 a,リレーションシップの重ね合わせ21 b)=>a?.Equals(b)??b is null;
        public static bool operator!=(リレーションシップの重ね合わせ21 a,リレーションシップの重ね合わせ21 b)=>!(a==b);
        public override bool Equals(object other)=>this.Equals(other as リレーションシップの重ね合わせ21);
        public bool Equals(リレーションシップの重ね合わせ21 other){
            if(!base.ProtectedEquals(other))return false;
            if(!this.D.Equals(other.D))return false;
            return true;
        }
        public override void AddRelationship(SetEntities Container){
            base.AddRelationship(Container);
        }
        public override void ConcurrentAddRelationship(SetEntities Container){
            base.ConcurrentAddRelationship(Container);
        }
        public override void RemoveRelationship(SetEntities Container){
            base.RemoveRelationship(Container);
        }
        public override void ConcurrentRemoveRelationship(SetEntities Container){
            base.ConcurrentRemoveRelationship(Container);
        }
        //NavigationPropertyリレーションシップの重ね合わせ親11(NavigationProperty)
        /// <summary>NavigationProperty概要リレーションシップの重ね合わせ親11</summary>
        /// <remarks>NavigationProperty長い説明リレーションシップの重ね合わせ親11</remarks>
        //IFrom,UTo
        //リレーションシップ
        //1→*
        [NonSerialized]
        internal readonly Set<リレーションシップの重ね合わせ親11>_NavigationPropertyリレーションシップの重ね合わせ親11=new Set<リレーションシップの重ね合わせ親11>();
        public ASet<リレーションシップの重ね合わせ親11>NavigationPropertyリレーションシップの重ね合わせ親11=>this._NavigationPropertyリレーションシップの重ね合わせ親11;
        //NavigationPropertyEntity1(NavigationProperty)
        /// <summary>Navigation概要PropertyEntity1</summary>
        /// <remarks>Navigation長い説明PropertyEntity1</remarks>
        internal readonly Set<Entity1>_NavigationPropertyEntity1=new Set<Entity1>();
        public ASet<Entity1>NavigationPropertyEntity1=>this._NavigationPropertyEntity1;
    }
    //Entity
    [Serializable]
    public sealed class リレーションシップの重ね合わせ親11:リレーションシップの重ね合わせ親1,IEquatable<リレーションシップの重ね合わせ親11>{
        public global::System.Int32 D{get;}
        //値コンストラクタ
        public リレーションシップの重ね合わせ親11(global::System.Int32 Id,global::System.String A,global::System.String B,global::System.String C,global::System.Int32 D):base(Id:Id,A:A,B:B,C:C){
            this.D=D;
        }
        internal override void ToStringBuilder(StringBuilder sb){
            base.ToStringBuilder(sb);
            sb.Append(","+nameof(D)+"="+this.D);
        }
        public static bool operator==(リレーションシップの重ね合わせ親11 a,リレーションシップの重ね合わせ親11 b)=>a?.Equals(b)??b is null;
        public static bool operator!=(リレーションシップの重ね合わせ親11 a,リレーションシップの重ね合わせ親11 b)=>!(a==b);
        public override bool Equals(object other)=>this.Equals(other as リレーションシップの重ね合わせ親11);
        public bool Equals(リレーションシップの重ね合わせ親11 other){
            if(!base.ProtectedEquals(other))return false;
            if(!this.D.Equals(other.D))return false;
            return true;
        }
        public override void AddRelationship(SetEntities Container){
            base.AddRelationship(Container);
            (this.NavigationPropertyリレーションシップの重ね合わせ21=Container.リレーションシップの重ね合わせ2Set.GetReference<リレーションシップの重ね合わせ21>(new Key.リレーションシップの重ね合わせ2(this.B,this.C)))._NavigationPropertyリレーションシップの重ね合わせ親11.VoidAdd(this);
        }
        public override void ConcurrentAddRelationship(SetEntities Container){
            base.ConcurrentAddRelationship(Container);
            (this.NavigationPropertyリレーションシップの重ね合わせ21=Container.リレーションシップの重ね合わせ2Set.GetReference<リレーションシップの重ね合わせ21>(new Key.リレーションシップの重ね合わせ2(this.B,this.C)))._NavigationPropertyリレーションシップの重ね合わせ親11.ConcurrentVoidAdd(this);
        }
        public override void RemoveRelationship(SetEntities Container){
            base.RemoveRelationship(Container);
            this.NavigationPropertyリレーションシップの重ね合わせ21._NavigationPropertyリレーションシップの重ね合わせ親11.Remove(this);
        }
        public override void ConcurrentRemoveRelationship(SetEntities Container){
            base.ConcurrentRemoveRelationship(Container);
            this.NavigationPropertyリレーションシップの重ね合わせ21._NavigationPropertyリレーションシップの重ね合わせ親11.ConcurrentRemove(this);
        }
        //NavigationPropertyリレーションシップの重ね合わせ21(NavigationProperty)
        /// <summary>NavigationProperty概要リレーションシップの重ね合わせ2</summary>
        /// <remarks>NavigationProperty長い説明リレーションシップの重ね合わせ2</remarks>
        //ITo,UFrom
        //リレーションシップ
        //*→1
        [field: NonSerialized]
        public リレーションシップの重ね合わせ21 NavigationPropertyリレーションシップの重ね合わせ21{get;private set;}
        //外部キー
        public Key.リレーションシップの重ね合わせ2 NavigationPropertyOneリレーションシップの重ね合わせ21Manyリレーションシップの重ね合わせ親11=>this.NavigationPropertyリレーションシップの重ね合わせ21.PrimaryKey;
    }
    //Entity
    [Serializable]
    public sealed class sealed_class:abstract_class,IEquatable<sealed_class>{
        public global::System.Int32 Property1{get;}
        //値コンストラクタ
        public sealed_class(global::System.Int32 ID,global::System.Int32 Property1):base(ID:ID){
            this.Property1=Property1;
        }
        internal override void ToStringBuilder(StringBuilder sb){
            base.ToStringBuilder(sb);
            sb.Append(","+nameof(Property1)+"="+this.Property1);
        }
        public static bool operator==(sealed_class a,sealed_class b)=>a?.Equals(b)??b is null;
        public static bool operator!=(sealed_class a,sealed_class b)=>!(a==b);
        public override bool Equals(object other)=>this.Equals(other as sealed_class);
        public bool Equals(sealed_class other){
            if(!base.ProtectedEquals(other))return false;
            if(!this.Property1.Equals(other.Property1))return false;
            return true;
        }
        public override void AddRelationship(SetEntities Container){
            base.AddRelationship(Container);
        }
        public override void ConcurrentAddRelationship(SetEntities Container){
            base.ConcurrentAddRelationship(Container);
        }
        public override void RemoveRelationship(SetEntities Container){
            base.RemoveRelationship(Container);
        }
        public override void ConcurrentRemoveRelationship(SetEntities Container){
            base.ConcurrentRemoveRelationship(Container);
        }
    }
    //Entity
    [Serializable]
    public sealed class public_class:internal_class,IEquatable<public_class>{
        public global::System.Int32 Property1{get;}
        //値コンストラクタ
        public public_class(global::System.Int32 ID,global::System.Int32 Property1):base(ID:ID){
            this.Property1=Property1;
        }
        internal override void ToStringBuilder(StringBuilder sb){
            base.ToStringBuilder(sb);
            sb.Append(","+nameof(Property1)+"="+this.Property1);
        }
        public static bool operator==(public_class a,public_class b)=>a?.Equals(b)??b is null;
        public static bool operator!=(public_class a,public_class b)=>!(a==b);
        public override bool Equals(object other)=>this.Equals(other as public_class);
        public bool Equals(public_class other){
            if(!base.ProtectedEquals(other))return false;
            if(!this.Property1.Equals(other.Property1))return false;
            return true;
        }
        public override void AddRelationship(SetEntities Container){
            base.AddRelationship(Container);
        }
        public override void ConcurrentAddRelationship(SetEntities Container){
            base.ConcurrentAddRelationship(Container);
        }
        public override void RemoveRelationship(SetEntities Container){
            base.RemoveRelationship(Container);
        }
        public override void ConcurrentRemoveRelationship(SetEntities Container){
            base.ConcurrentRemoveRelationship(Container);
        }
    }
    //Entity
    [Serializable]
    public sealed class StringTable1:StringTable,IEquatable<StringTable1>{
        public global::System.String Property1{get;}
        //値コンストラクタ
        public StringTable1(global::System.Int32 ID,global::System.String Property1):base(ID:ID){
            this.Property1=Property1;
        }
        internal override void ToStringBuilder(StringBuilder sb){
            base.ToStringBuilder(sb);
            sb.Append(","+nameof(Property1)+"="+this.Property1);
        }
        public static bool operator==(StringTable1 a,StringTable1 b)=>a?.Equals(b)??b is null;
        public static bool operator!=(StringTable1 a,StringTable1 b)=>!(a==b);
        public override bool Equals(object other)=>this.Equals(other as StringTable1);
        public bool Equals(StringTable1 other){
            if(!base.ProtectedEquals(other))return false;
            if(!this.Property1.Equals(other.Property1))return false;
            return true;
        }
        public override void AddRelationship(SetEntities Container){
            base.AddRelationship(Container);
        }
        public override void ConcurrentAddRelationship(SetEntities Container){
            base.ConcurrentAddRelationship(Container);
        }
        public override void RemoveRelationship(SetEntities Container){
            base.RemoveRelationship(Container);
        }
        public override void ConcurrentRemoveRelationship(SetEntities Container){
            base.ConcurrentRemoveRelationship(Container);
        }
    }
    //Entity
    [Serializable]
    public sealed class StringTable2:StringTable,IEquatable<StringTable2>{
        public global::System.String Property2{get;}
        //値コンストラクタ
        public StringTable2(global::System.Int32 ID,global::System.String Property2):base(ID:ID){
            this.Property2=Property2;
        }
        internal override void ToStringBuilder(StringBuilder sb){
            base.ToStringBuilder(sb);
            sb.Append(","+nameof(Property2)+"="+this.Property2);
        }
        public static bool operator==(StringTable2 a,StringTable2 b)=>a?.Equals(b)??b is null;
        public static bool operator!=(StringTable2 a,StringTable2 b)=>!(a==b);
        public override bool Equals(object other)=>this.Equals(other as StringTable2);
        public bool Equals(StringTable2 other){
            if(!base.ProtectedEquals(other))return false;
            if(!this.Property2.Equals(other.Property2))return false;
            return true;
        }
        public override void AddRelationship(SetEntities Container){
            base.AddRelationship(Container);
        }
        public override void ConcurrentAddRelationship(SetEntities Container){
            base.ConcurrentAddRelationship(Container);
        }
        public override void RemoveRelationship(SetEntities Container){
            base.RemoveRelationship(Container);
        }
        public override void ConcurrentRemoveRelationship(SetEntities Container){
            base.ConcurrentRemoveRelationship(Container);
        }
    }
    //Entity
    [Serializable]
    public abstract class abstract_class1:class1{
        public global::System.Int32 Property{get;}
        //値コンストラクタ
        protected abstract_class1(global::System.Int32 Id,global::System.Int32 Property):base(Id:Id){
            this.Property=Property;
        }
        internal override void ToStringBuilder(StringBuilder sb){
            base.ToStringBuilder(sb);
            sb.Append(","+nameof(Property)+"="+this.Property);
        }
        public override bool Equals(object obj)=>this.ProtectedEquals(obj as abstract_class1);
        protected bool ProtectedEquals(abstract_class1 other){
            if(!base.ProtectedEquals(other))return false;
            if(!this.Property.Equals(other.Property))return false;
            return true;
        }
        public override void AddRelationship(SetEntities Container){
            base.AddRelationship(Container);
        }
        public override void ConcurrentAddRelationship(SetEntities Container){
            base.ConcurrentAddRelationship(Container);
        }
        public override void RemoveRelationship(SetEntities Container){
            base.RemoveRelationship(Container);
        }
        public override void ConcurrentRemoveRelationship(SetEntities Container){
            base.ConcurrentRemoveRelationship(Container);
        }
    }
    //Entity
    [Serializable]
    public sealed class sealed_class1:abstract_class1,IEquatable<sealed_class1>{
        public global::System.Int32 Property2{get;}
        //値コンストラクタ
        public sealed_class1(global::System.Int32 Id,global::System.Int32 Property,global::System.Int32 Property2):base(Id:Id,Property:Property){
            this.Property2=Property2;
        }
        internal override void ToStringBuilder(StringBuilder sb){
            base.ToStringBuilder(sb);
            sb.Append(","+nameof(Property2)+"="+this.Property2);
        }
        public static bool operator==(sealed_class1 a,sealed_class1 b)=>a?.Equals(b)??b is null;
        public static bool operator!=(sealed_class1 a,sealed_class1 b)=>!(a==b);
        public override bool Equals(object other)=>this.Equals(other as sealed_class1);
        public bool Equals(sealed_class1 other){
            if(!base.ProtectedEquals(other))return false;
            if(!this.Property2.Equals(other.Property2))return false;
            return true;
        }
        public override void AddRelationship(SetEntities Container){
            base.AddRelationship(Container);
        }
        public override void ConcurrentAddRelationship(SetEntities Container){
            base.ConcurrentAddRelationship(Container);
        }
        public override void RemoveRelationship(SetEntities Container){
            base.RemoveRelationship(Container);
        }
        public override void ConcurrentRemoveRelationship(SetEntities Container){
            base.ConcurrentRemoveRelationship(Container);
        }
    }
    //多対多のアソシエーションクラスを記述します。
    [Serializable]
    public struct 多1多2:IEquatable<多1多2>,IAssociation<Key.多1,多1,Key.多2,多2,SetEntities>{
        public Key.多1 Key1{get;private set;}
        public Key.多2 Key2{get;private set;}
        public 多1 多1End1のロール名=>this.Value1;
        public 多2 多2End2のロール名=>this.Value2;
        public 多1 Value1{get;private set;}
        public 多2 Value2{get;private set;}
        public 多1多2(Key.多1 Key1,Key.多2 Key2){
            this.Key1=Key1;
            this.Key2=Key2;
            this.Value1=null;
            this.Value2=null;
        }
        public 多1多2(多1 多1End1のロール名,多2 多2End2のロール名){
            this.Key1=多1End1のロール名.PrimaryKey;
            this.Key2=多2End2のロール名.PrimaryKey;
            this.Value1=多1End1のロール名;
            this.Value2=多2End2のロール名;
        }
        public bool Equals(多1多2 other)=>
            this.多1End1のロール名.Equals(other.多1End1のロール名)&&
            this.多2End2のロール名.Equals(other.多2End2のロール名);
        public override bool Equals(object obj)=>obj is 多1多2 other&& this.Equals(other);
        public override int GetHashCode()=>
            this.Key1.GetHashCode()^
            this.Key2.GetHashCode();
        public static bool operator==(多1多2 a,多1多2 b)=> a.Equals(b);
        public static bool operator!=(多1多2 a,多1多2 b)=>!a.Equals(b);
        public override string ToString(){
            var sb=new StringBuilder();
            this.多1End1のロール名.ToStringBuilder(sb);
            this.多2End2のロール名.ToStringBuilder(sb);
            return sb.ToString();
        }
        public void AddRelationship(SetEntities Container){
            (this.Value1=Container.多1.GetReference<多1>(this.Key1))._多2End1ナビゲーションプロパティ.VoidAdd(this.Value2);
            (this.Value2=Container.多2.GetReference<多2>(this.Key2))._多1End2ナビゲーションプロパティ.VoidAdd(this.Value1);
        }
        public void ConcurrentAddRelationship(SetEntities Container){
            (this.Value1=Container.多1.GetReference<多1>(this.Key1))._多2End1ナビゲーションプロパティ.ConcurrentVoidAdd(this.Value2);
            (this.Value2=Container.多2.GetReference<多2>(this.Key2))._多1End2ナビゲーションプロパティ.ConcurrentVoidAdd(this.Value1);
        }
        public void RemoveRelationship(SetEntities Container){
            Container.多1.GetReference<多1>(this.Key1)._多2End1ナビゲーションプロパティ.Remove(this.Value2);
            Container.多2.GetReference<多2>(this.Key2)._多1End2ナビゲーションプロパティ.Remove(this.Value1);
        }
        public void ConcurrentRemoveRelationship(SetEntities Container){
            Container.多1.GetReference<多1>(this.Key1)._多2End1ナビゲーションプロパティ.ConcurrentRemove(this.Value2);
            Container.多2.GetReference<多2>(this.Key2)._多1End2ナビゲーションプロパティ.ConcurrentRemove(this.Value1);
        }
    }
    //ComplexType クラスを記述します。
    [Serializable]
    public struct ComplexType1:IEquatable<ComplexType1>{
        public global::System.Int32 Int32{get;}
        public global::System.String String{get;}
        public ComplexType1(global::System.Int32 Int32,global::System.String String){
            this.Int32=Int32;
            this.String=String;
        }
        public override string ToString()=>
            new StringBuilder(nameof(Int32)+"="+this.Int32)
            .Append(","+nameof(String)+"="+this.String)
            .ToString();
        public bool Equals(ComplexType1 other)=>
            global::System.Int32.Equals(this.Int32,other.Int32)&&
            object.Equals(this.String,other.String);
        public override bool Equals(object obj)=>this.Equals((ComplexType1)obj);
        public override int GetHashCode(){
            var CRC32=new CRC32();
            CRC32.Input(this.Int32);
            CRC32.Input(this.String);
            return CRC32.GetHashCode();
        }
        public static bool operator==(ComplexType1 a,ComplexType1 b)=> a.Equals(b);
        public static bool operator!=(ComplexType1 a,ComplexType1 b)=>!a.Equals(b);
    }
    //列挙型を記述します。
}



