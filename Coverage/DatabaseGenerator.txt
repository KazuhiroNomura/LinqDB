<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ output extension=".cs" #>
<#
	var userSettings =new UserSettings{
        SourceCsdlPath = inputFile ,
//		SourceCsdlPath = System.IO.Path.GetFileNameWithoutExtension(Host.TemplateFile)+".edmx",
		ReferenceCsdlPaths = new string[] {},
		FullyQualifySystemTypes = true,
		CreateContextAddToMethods = true,
		CamelCaseFields = false,
	};
	ApplyUserSettings(userSettings);
	if(Errors.HasErrors){
		return string.Empty;
	}
	var loader = new MetadataLoader(this);
	var code = new CodeGenerationTools(this){
		FullyQualifySystemTypes = userSettings.FullyQualifySystemTypes, 
		CamelCaseFields = userSettings.CamelCaseFields
	};
	ItemCollection = loader.CreateEdmItemCollection(SourceCsdlPath, ReferenceCsdlPaths.ToArray());
	ModelNamespace =code.EscapeNamespace(code.VsNamespaceSuggestion());
	UpdateObjectNamespaceMap(ModelNamespace);
	var ef=new MetadataTools(this);
	WriteLine                                                                ("//------------------------------------------------------------------------------");
	WriteLine                                                                ("// <auto-generated>");
	WriteLine                                                                ("// "+GetResourceString("Template_GeneratedCodeCommentLine1"));
	WriteLine                                                                ("// "+GetResourceString("Template_GeneratedCodeCommentLine2"));
	WriteLine                                                                ("// "+GetResourceString("Template_GeneratedCodeCommentLine3"));
	WriteLine                                                                ("// </auto-generated>");
	WriteLine                                                                ("//------------------------------------------------------------------------------");
	WriteLine                                                                ("using System;");
	WriteLine                                                                ("using System.Globalization;");
	WriteLine                                                                ("using System.IO;");
	WriteLine                                                                ("using System.Text;");
	WriteLine                                                                ("using System.Xml;");
	WriteLine                                                                ("using Lite;");
	WriteLine                                                                ("using Lite.Sets;");
	WriteLine                                                                ("using Lite.CRC;");
	WriteLine                                                                ("using Lite.Databases;");
	WriteLine                                                                ("#pragma warning disable 661                              // ==,!=は定義されているのにGetHashCodeが定義されていない警告。無効化。");
	WriteLine                                                                ("#pragma warning disable CS0659                           // 型は Object.Equals(object o) をオーバーライドしますが、Object.GetHashCode() をオーバーライドしません。無効化。");
	WriteLine                                                                ("// ReSharper disable UnusedMember.Global                 使われていないメンバーは削除する。無効化。");
	WriteLine                                                                ("// ReSharper disable FieldCanBeMadeReadOnly.Global       フィールドはreadonlyを推奨する。無効化。");
	WriteLine                                                                ("// ReSharper disable PartialTypeWithSinglePart           partialは必要会い。無効化。");
	WriteLine                                                                ("// ReSharper disable RedundantNameQualifier              Int32→intのような省略形を推奨。無効化。");
	WriteLine                                                                ("// ReSharper disable PossibleNullReferenceException      nullチェックを推奨。無効化。");
	WriteLine                                                                ("// ReSharper disable MemberCanBePrivate.Global           privateを推奨。無効化。");
	WriteLine                                                                ("// ReSharper disable ClassNeverInstantiated.Global       インスタンス化されたけど使われていない。無効化。");
	WriteLine                                                                ("// ReSharper disable PossibleInvalidOperationException   引数名を推奨。無効化。");
	WriteLine                                                                ("// ReSharper disable ConvertNullableToShortForm          完全型名を推奨。無効化。");
	WriteLine                                                                ("// ReSharper disable MemberCanBeProtected.Global         protectedに推奨。無効化。");
	WriteLine                                                                ("// ReSharper disable ConvertIfStatementToReturnStatement ifとreturnを?:に推奨。無効化。");
	WriteLine                                                                ("// ReSharper disable RedundantOverriddenMember           overrideでbaseメソッド呼んでいるだけで削除推奨。無効化。");
	WriteLine                                                                ("// ReSharper disable UnusedVariable                      Relationshipメソッドでローカルに代入して使わなかった代入文削除推奨。無効化。");
	WriteLine                                                                ("namespace "+ModelNamespace+"{");
	var EntityProperties=new StringBuilder();
	var ctor=new StringBuilder();
	var Init=new StringBuilder();
	var Read_=new StringBuilder();
	var Write_=new StringBuilder();
	var Assign=new StringBuilder();
	var Commit=new StringBuilder();
	var UpdateRelationship=new StringBuilder();
	var RelationValidate0=new StringBuilder();
	var RelationValidate1=new StringBuilder();
	var EntityKeyTypes=new StringBuilder();
	var EntityTypes=new StringBuilder();
	var AddRelationship=new StringBuilder();
	var ConcurrentAddRelationship=new StringBuilder();
	var RemoveRelationship=new StringBuilder();
	var ConcurrentRemoveRelationship=new StringBuilder();
	var AssociationTypes=new StringBuilder();
	var ComplexTypes=new StringBuilder();
	var EnumTypes=new StringBuilder();
	ComplexTypes.AppendLine                                                      ("    //ComplexType クラスを記述します。");
	EnumTypes.AppendLine                                                         ("    //列挙型を記述します。");
	IEnumerable<GlobalItem> Enumerable_a;
	if(Path.GetExtension(SourceCsdlPath)==".edmx"){
		Enumerable_a=ItemCollection;
	}else{
		Enumerable_a=ItemCollection.Where(e => e.MetadataProperties.Any(mp => mp.Name == "SchemaSource" && (string)mp.Value == SourceCsdlPath));
	}
	foreach(var a in Enumerable_a){
		var EntityContainer1=a as EntityContainer;
		if(EntityContainer1!=null){
			var e2=new EntityContainer2(EntityContainer1);
			ListEntityContainer2.Add(e2);
			var ListEntitySet1=e2.ListEntitySet;
			var ListAssociationSet1=e2.ListAssociationSet;
			foreach(var BaseEntitySet in EntityContainer1.BaseEntitySets){
				if(BaseEntitySet is EntitySet EntitySet){
					Dictionary_EntityType_EntitySet.Add(EntitySet.ElementType,EntitySet);
					ListEntitySet1.Add(EntitySet);
				}else if(BaseEntitySet is AssociationSet AssociationSet){
					if(AssociationSet.ElementType.ReferentialConstraints.Count==0){
						var AssociationType=AssociationSet.ElementType;
						if(AssociationType.RelationshipEndMembers.Count==2){
							var RelationshipEndMembers=AssociationType.RelationshipEndMembers;
							if(RelationshipEndMembers[0].RelationshipMultiplicity==RelationshipMultiplicity.Many&&RelationshipEndMembers[1].RelationshipMultiplicity==RelationshipMultiplicity.Many){
								ListAssociationSet1.Add(AssociationSet);
							}
						}
					}
				}
			}
		}else if(a is EntityType EntityType1){
			ListEntityType.Add(EntityType1);
		}else if(a is AssociationType AssociationType&&AssociationType.ReferentialConstraints.Count==0){
			if(AssociationType.RelationshipEndMembers.Count==2){
				var RelationshipEndMembers=AssociationType.RelationshipEndMembers;
				if(RelationshipEndMembers[0].RelationshipMultiplicity==RelationshipMultiplicity.Many&&RelationshipEndMembers[1].RelationshipMultiplicity==RelationshipMultiplicity.Many){
					ListAssociationType.Add(AssociationType);
				}
			}
		}else if(a is ComplexType ComplexType){
			var ComplexType_Name=code.Escape(ComplexType.Name);
			ComplexTypes.Append                                              (SummaryComment(ComplexType,"    "));
			ComplexTypes.AppendLine                                          ("    [Serializable]");
			ComplexTypes.AppendLine                                          ("    "+Accessibility.ForType(ComplexType)+" struct "+ComplexType_Name+":IEquatable<"+ComplexType_Name+">{");
			var ComplexType_Properties=ComplexType.Properties;
			var ComplexType_Properties_Count=ComplexType_Properties.Count;
			if(ComplexType_Properties_Count>0){
				foreach(var ComplexType_Property in ComplexType_Properties){
					ComplexTypes.AppendLine                                  (SummaryComment(ComplexType_Property,"        ")+"        "+Accessibility.ForProperty(ComplexType_Property)+" "+code.Escape(ComplexType_Property.TypeUsage)+" "+code.Escape(ComplexType_Property)+"{get;}");
				}
				ComplexTypes.Append                                          ("        public "+ComplexType_Name+"(");
				for(var b=0;b<ComplexType_Properties_Count;b++){
					var ComplexType_Property=ComplexType_Properties[b];
					ComplexTypes.Append                                      (code.Escape(ComplexType_Property.TypeUsage)+" "+code.Escape(ComplexType_Property));
					if(b==ComplexType_Properties_Count-1)continue;
					ComplexTypes.Append                                      (",");
				}
				ComplexTypes.AppendLine                                      ("){");
				foreach(var ComplexType_Property in ComplexType_Properties){
					var Name=code.Escape(ComplexType_Property.Name);
					ComplexTypes.AppendLine                                  ("            this."+Name+"="+Name+";");
				}
				ComplexTypes.AppendLine                                      ("        }");
			}
			ComplexTypes.Append                                              ("        public override string ToString()=>");
			if(ComplexType_Properties_Count==0){
				ComplexTypes.AppendLine                                      (                                           "\"\";");
			}else{
				var Name=code.Escape(ComplexType_Properties[0].Name);
				if(ComplexType_Properties_Count==1){
					ComplexTypes.AppendLine                                  (                                           "\""+Name+"=\"+"+Name+";");
				}else{
					ComplexTypes.AppendLine                                  ();
					ComplexTypes.AppendLine                                  ("            new StringBuilder(nameof("+Name+")+\"=\"+this."+Name+")");
					for(var b=1;b<ComplexType_Properties_Count;b++){
						Name=code.Escape(ComplexType_Properties[b].Name);
						ComplexTypes.AppendLine                              ("            .Append(\",\"+nameof("+Name+")+\"=\"+this."+Name+")");
					}
					ComplexTypes.AppendLine                                  ("            .ToString();");
				}
			}
			if(ComplexType_Properties_Count==0){
				ComplexTypes.AppendLine                                      ("        public bool Equals("+ComplexType_Name+" other)=>true;");
			}else{
				ComplexTypes.AppendLine                                      ("        public bool Equals("+ComplexType_Name+" other)=>");
				for(var b=0;b<ComplexType_Properties_Count-1;b++){
					var ComplexType_Property=ComplexType_Properties[b];
					var TypeUsage=ComplexType_Property.TypeUsage;
					var Name=code.Escape(ComplexType_Property.Name);
					if(TypeUsage.EdmType.BuiltInTypeKind==BuiltInTypeKind.ComplexType||ef.ClrType(TypeUsage).IsValueType){
						ComplexTypes.AppendLine                              ("            "+code.Escape(TypeUsage)+".Equals(this."+Name+",other."+Name+")&&");
					}else{
						ComplexTypes.AppendLine                              ("            object.Equals(this."+Name+",other."+Name+")&&");
					}
				}
				{
					var ComplexType_Property=ComplexType_Properties[ComplexType_Properties_Count-1];
					var TypeUsage=ComplexType_Property.TypeUsage;
					var Name=code.Escape(ComplexType_Property.Name);
					if(TypeUsage.EdmType.BuiltInTypeKind==BuiltInTypeKind.ComplexType||ef.ClrType(TypeUsage).IsValueType){
						ComplexTypes.AppendLine                              ("            "+code.Escape(TypeUsage)+".Equals(this."+Name+",other."+Name+");");
					}else{
						ComplexTypes.AppendLine                              ("            object.Equals(this."+Name+",other."+Name+");");
					}
				}
			}
			ComplexTypes.AppendLine                                          ("        public override bool Equals(object obj)=>this.Equals(("+ComplexType_Name+")obj);");
			if(ComplexType_Properties_Count==0){
				ComplexTypes.AppendLine                                      ("        public override int GetHashCode()=>0;");
			}else if(ComplexType_Properties_Count==1){
				ComplexTypes.AppendLine                                      ("        public override int GetHashCode()=>this."+code.Escape(ComplexType_Properties[0].Name)+".GetHashCode();");
			}else{
				ComplexTypes.AppendLine                                      ("        public override int GetHashCode(){");
				ComplexTypes.AppendLine                                      ("            var CRC32=new CRC32();");
				foreach(var ComplexType_Property in ComplexType_Properties){
					ComplexTypes.AppendLine                                  ("            CRC32.Input(this."+code.Escape(ComplexType_Property.Name)+");");
				}
				ComplexTypes.AppendLine                                      ("            return CRC32.GetHashCode();");
				ComplexTypes.AppendLine                                      ("        }");
			}
			ComplexTypes.AppendLine                                          ("        public static bool operator==("+ComplexType_Name+" a,"+ComplexType_Name+" b)=> a.Equals(b);");
			ComplexTypes.AppendLine                                          ("        public static bool operator!=("+ComplexType_Name+" a,"+ComplexType_Name+" b)=>!a.Equals(b);");
			ComplexTypes.AppendLine                                          ("    }");
		}else if(a is EnumType EnumType){
			EnumTypes.Append                                                 (SummaryComment(EnumType,"    "));
			if(EnumType.IsFlags){
				EnumTypes.AppendLine                                         ("    [Flags]");
			}
			EnumTypes.Append                                                 ("    "+Accessibility.ForType(EnumType)+" enum "+code.Escape(EnumType.Name));
			switch(EnumType.UnderlyingType.PrimitiveTypeKind){
				case System.Data.Metadata.Edm.PrimitiveTypeKind.Byte:
				case System.Data.Metadata.Edm.PrimitiveTypeKind.SByte:
				case System.Data.Metadata.Edm.PrimitiveTypeKind.Int16:
				case System.Data.Metadata.Edm.PrimitiveTypeKind.Int64:
					EnumTypes.Append                                         (":"+EnumType.UnderlyingType.PrimitiveTypeKind.ToString());
					break;
			}
			EnumTypes.AppendLine                                             ("{");
			foreach(var Member in EnumType.Members){
				EnumTypes.AppendLine                                         ("        "+code.Escape(Member)+"="+Member.Value+",");
			}
			EnumTypes.AppendLine                                             ("    }");
		}
	}
	if(ListEntityContainer2.Count==0){
		WriteLine                                                            ("Containerが存在しなかった。");
		return string.Empty;
	}
	var EntityContainer2=ListEntityContainer2[0];
	var EntityContainer=EntityContainer2.EntityContainer;
	var EntityContainer_Name=code.Escape(EntityContainer);
	WriteLine                                                                ("    [Serializable]");
	WriteLine                                                                ("    "+Accessibility.ForType(EntityContainer)+" partial class "+EntityContainer_Name+":Container<"+EntityContainer_Name+">{");
	var ListAssociationSet=EntityContainer2.ListAssociationSet;
	//多対多Set<>とその初期化
	foreach(var AssociationSet in ListAssociationSet){
		var AssociationType=AssociationSet.ElementType;
		if(!Dictionary_EdmType_AssociationSet.ContainsKey(AssociationType))
			Dictionary_EdmType_AssociationSet.Add(AssociationType,AssociationSet);
		EntityProperties.Append                                              (SummaryComment(AssociationSet,"        "));
		var AssociationEndMembers=AssociationType.AssociationEndMembers;
		var AssociationEndMembers_0_EntityType=AssociationEndMembers[0].GetEntityType();
		var AssociationEndMembers_1_EntityType=AssociationEndMembers[1].GetEntityType();
		var AssociationSet_Name=code.Escape(AssociationSet.Name);
		var AssociationSet_Type="AssociationSet<"+code.Escape(AssociationType.Name)+",Key."+code.Escape(GetRootEdmType(AssociationEndMembers_0_EntityType))+","+code.Escape(AssociationEndMembers_0_EntityType)+",Key."+code.Escape(GetRootEdmType(AssociationEndMembers_1_EntityType))+","+code.Escape(AssociationEndMembers_1_EntityType)+","+EntityContainer_Name+">";
		EntityProperties.AppendLine                                          ("        public "+AssociationSet_Type+AssociationSet_Name+"{get;private set;}");
	}
	var ListEntitySet=EntityContainer2.ListEntitySet;
	//EntitySet<>とその初期化
	foreach(var EntitySet in ListEntitySet){
		var EntityType=EntitySet.ElementType;
		if(!Dictionary_EdmType_EntitySet.ContainsKey(EntityType))
			Dictionary_EdmType_EntitySet.Add(EntityType,EntitySet);
		var EntityType_Name=code.Escape(EntitySet.ElementType.Name);
		EntityProperties.Append                                              (SummaryComment(EntitySet,"        "));
		EntityProperties.AppendLine                                          ("        "+Accessibility.ForReadOnlyProperty(EntitySet)+" Set<"+EntityType_Name+",Key."+EntityType_Name+","+EntityContainer_Name+"> "+code.Escape(EntitySet.Name)+"{get;private set;}");
	}
	EntityProperties.AppendLine                                              ("        public override "+EntityContainer_Name+" Transaction(){");
	EntityProperties.AppendLine                                              ("            var Container=new "+EntityContainer_Name+"(this);");
	EntityProperties.AppendLine                                              ("            this.Copy(Container);");
	EntityProperties.AppendLine                                              ("            return Container;");
	EntityProperties.AppendLine                                              ("        }");
	ctor.AppendLine                                                          ("        public "+EntityContainer_Name+"():base(default("+EntityContainer_Name+"))=>this.Init();");
	ctor.AppendLine                                                          ("        public "+EntityContainer_Name+"("+EntityContainer_Name+" Parent):base(Parent)=>this.Init();");
	ctor.AppendLine                                                          ("        public "+EntityContainer_Name+"(Stream Stream,XmlDictionaryReader Reader,XmlDictionaryWriter Writer):base(Stream,Reader,Writer){}");
	Init.AppendLine                                                          ("        protected override void Init(){");
	Read_.AppendLine                                                         ("        /// <inheritdoc/>");
	Read_.AppendLine                                                         ("        protected override void Read(XmlDictionaryReader Reader){");
	Write_.AppendLine                                                        ("        /// <inheritdoc/>");
	Write_.AppendLine                                                        ("        protected override void Write(XmlDictionaryWriter Writer){");
	Assign.AppendLine                                                        ("        protected override void Copy("+EntityContainer_Name+" To){");
	Commit.AppendLine                                                        ("        protected override void Commit(XmlDictionaryWriter Writer){");
	UpdateRelationship.AppendLine                                            ("        protected override void UpdateRelationship(){");
	RelationValidate0.AppendLine                                             ("        public override void RelationValidate(){");
	/*
	var List未処理EntitySet=new List<EntitySet>(ListEntitySet);
	var List順序付きEntitySet=new List<EntitySet>();
	while(List未処理EntitySet.Count>0){
		for(var a=List未処理EntitySet.Count-1;a>=0;a--){
			var 未処理EntitySet=List未処理EntitySet[a];
			var EntityType=未処理EntitySet.ElementType;
			foreach(var NavigationProperty in EntityType.NavigationProperties) {
				var FromEndMember=NavigationProperty.FromEndMember;
				var FromEndMember_EntityType=FromEndMember.GetEntityType();
				var ReferentialConstraints=((AssociationType)NavigationProperty.RelationshipType).ReferentialConstraints;
				if(ReferentialConstraints.Count==0)continue;
				foreach(var ReferentialConstraint in ReferentialConstraints) {
					var FromProperties=ReferentialConstraint.FromProperties;
					var ToProperties=ReferentialConstraint.ToProperties;
					var FromRole=ReferentialConstraint.FromRole;
					var ToRole=ReferentialConstraint.ToRole;
					RelationshipEndMember RoleI=null,RoleU=null;
					ReadOnlyMetadataCollection<EdmProperty> PropertiesI,PropertiesU;
					if(EntityType==FromRole.GetEntityType()) {
						RoleI=FromRole;
						RoleU=ToRole;
						PropertiesI=FromProperties;
						PropertiesU=ToProperties;
					}else{
						RoleI=ToRole;
						RoleU=FromRole;
						PropertiesI=ToProperties;
						PropertiesU=FromProperties;
					}
					var RoleI_RelationshipMultiplicity=RoleI.RelationshipMultiplicity;
					var RoleU_RelationshipMultiplicity=RoleU.RelationshipMultiplicity;
					if(RoleI_RelationshipMultiplicity!=RelationshipMultiplicity.One){
						List未処理EntitySet.RemoveAt(a);
						List順序付きEntitySet.Add(未処理EntitySet);
						goto 終了;
					}
				}
				終了:;
			}
		}
	}
	*/
	foreach(var AssociationSet in ListAssociationSet){
		var AssociationType=AssociationSet.ElementType;
		EntityProperties.Append                                              (SummaryComment(AssociationSet,"        "));
		var AssociationEndMembers=AssociationType.AssociationEndMembers;
		var AssociationEndMembers_0=AssociationEndMembers[0];
		var AssociationEndMembers_1=AssociationEndMembers[1];
		var AssociationEndMembers_0_EntityType=AssociationEndMembers_0.GetEntityType();
		var AssociationEndMembers_1_EntityType=AssociationEndMembers_1.GetEntityType();
		var 主テーブル0=GetRootEdmType(AssociationEndMembers_0_EntityType);
		var 主テーブル1=GetRootEdmType(AssociationEndMembers_1_EntityType);
		var ForeignKey0=code.Escape(AssociationEndMembers_0);
		var ForeignKey1=code.Escape(AssociationEndMembers_1);
		var AssociationType_Name=code.Escape(AssociationType.Name);
		var AssociationTypeParameters=AssociationType_Name+",Key."+code.Escape(GetRootEdmType(AssociationEndMembers_0_EntityType))+","+code.Escape(AssociationEndMembers_0_EntityType)+",Key."+code.Escape(GetRootEdmType(AssociationEndMembers_1_EntityType))+","+code.Escape(AssociationEndMembers_1_EntityType)+","+EntityContainer_Name;
		var AssociationSet_Name=code.Escape(AssociationSet.Name);
		Init.AppendLine                                                      ("            this."+AssociationSet_Name+"=new AssociationSet<"+AssociationTypeParameters+">(this);");
		Read_.AppendLine                                                     ("            this."+AssociationSet_Name+".Read(Reader);");
		Write_.AppendLine                                                    ("            this."+AssociationSet_Name+".Write(Writer);");
		Assign.AppendLine                                                    ("            To."+AssociationSet_Name+".Assign(this."+AssociationSet_Name+");");
		Commit.AppendLine                                                    ("            this."+AssociationSet_Name+".Write(Writer);");
		RelationValidate0.AppendLine                                         ("            var "+AssociationSet_Name+"=this."+AssociationSet_Name+";");
		RelationValidate1.AppendLine                                         ("            //アソシエーションがエンティティに存在すること");
		RelationValidate1.AppendLine                                         ("            foreach(var a in "+AssociationSet_Name+"){");
		RelationValidate1.AppendLine                                         ("                if(!this."+code.Escape(Dictionary_EdmType_EntitySet[主テーブル0].Name)+".ContainsKey(a."+ForeignKey0+".PrimaryKey))throw new RelationshipException(\"\\\""+AssociationSet_Name+"\\\"の"+AssociationType_Name+"."+ForeignKey0+"\\\"に対応する\\\""+code.Escape(主テーブル0)+".PrimaryKey\\\"が無かった\");");
		RelationValidate1.AppendLine                                         ("                if(!this."+code.Escape(Dictionary_EdmType_EntitySet[主テーブル1].Name)+".ContainsKey(a."+ForeignKey1+".PrimaryKey))throw new RelationshipException(\"\\\""+AssociationSet_Name+"\\\"の"+AssociationType_Name+"."+ForeignKey1+"\\\"に対応する\\\""+code.Escape(主テーブル1)+".PrimaryKey\\\"が無かった\");");
		RelationValidate1.AppendLine                                         ("            }");
	}
	RelationValidate1.AppendLine                                             ("            //多対１");
	foreach(var EntitySet in ListEntitySet){
		var EntityType_Name=code.Escape(EntitySet.ElementType.Name);
		var EntitySet_Name=code.Escape(EntitySet.Name);
		Init.AppendLine                                                      ("            this."+EntitySet_Name+"=new Set<"+EntityType_Name+",Key."+EntityType_Name+","+EntityContainer_Name+">(this);");
		Read_.AppendLine                                                     ("            this."+EntitySet_Name+".Read(Reader);");
		Write_.AppendLine                                                    ("            this."+EntitySet_Name+".Write(Writer);");
		Assign.AppendLine                                                    ("            To."+EntitySet_Name+".Assign(this."+EntitySet_Name+");");
		Commit.AppendLine                                                    ("            this."+EntitySet_Name+".Write(Writer);");
		UpdateRelationship.AppendLine                                        ("            this."+EntitySet_Name+".UpdateRelationship();");
		RelationValidate0.AppendLine                                         ("            var "+EntitySet_Name+"=this."+EntitySet_Name+";");
		var EntityType=EntitySet.ElementType;
		foreach(var NavigationProperty in EntityType.NavigationProperties) {
			var ToEndMember=NavigationProperty.ToEndMember;
			var ToEndMember_EntityType=ToEndMember.GetEntityType();
			var AssociationType=(AssociationType)NavigationProperty.RelationshipType;
			var ReferentialConstraints=AssociationType.ReferentialConstraints;
			if(ReferentialConstraints.Count==0)continue;
			foreach(var ReferentialConstraint in ReferentialConstraints) {
				var FromProperties=ReferentialConstraint.FromProperties;
				var ToProperties=ReferentialConstraint.ToProperties;
				var FromRole=ReferentialConstraint.FromRole;
				var ToRole=ReferentialConstraint.ToRole;
				RelationshipEndMember RoleI=null,RoleU=null;
				ReadOnlyMetadataCollection<EdmProperty> PropertiesI,PropertiesU;
				if(EntityType==FromRole.GetEntityType()) {
					RoleI=FromRole;
					RoleU=ToRole;
					PropertiesI=FromProperties;
					PropertiesU=ToProperties;
				}else{
					RoleI=ToRole;
					RoleU=FromRole;
					PropertiesI=ToProperties;
					PropertiesU=FromProperties;
				}
				var RoleI_RelationshipMultiplicity=RoleI.RelationshipMultiplicity;
				var RoleU_RelationshipMultiplicity=RoleU.RelationshipMultiplicity;
				if(
					(
						RoleI_RelationshipMultiplicity==RelationshipMultiplicity.Many||
						RoleI_RelationshipMultiplicity==RelationshipMultiplicity.ZeroOrOne
					)&&RoleU_RelationshipMultiplicity==RelationshipMultiplicity.One
				){
					//ToEndはU,FromはI
					var AssociationEndMembers=AssociationType.AssociationEndMembers;
					RelationValidate1.AppendLine                             ("            foreach(var a in "+code.Escape(Dictionary_EdmType_EntitySet[EntityType].Name)+"){");
					var 主テーブル=GetRootEdmType(PropertiesU[0].DeclaringType);
					var ForeignKey=code.Escape(AssociationType);
					RelationValidate1.AppendLine                             ("                if(!"+code.Escape(Dictionary_EdmType_EntitySet[主テーブル].Name)+".ContainsKey(a."+ForeignKey+"))throw new RelationshipException(\"外部キー"+ForeignKey+"に対応する"+code.Escape(主テーブル)+".PrimaryKeyが無かった\");");
					RelationValidate1.AppendLine                             ("            }");
				}
			}
		}
	}
	Init.AppendLine                                                          ("        }");
	Read_.AppendLine                                                         ("        }");
	Write_.AppendLine                                                        ("        }");
	Assign.AppendLine                                                        ("        }");
	Commit.AppendLine                                                        ("        }");
	UpdateRelationship.AppendLine                                            ("        }");
	RelationValidate1.AppendLine                                             ("        }");
	RelationValidate1.AppendLine                                             ("    }");
	EntityKeyTypes.AppendLine                                                ("    namespace Key{");
	foreach(var EntityType in ListEntityType){
		if(EntityType.BaseType!=null)continue;
		var EntityType_Name=code.Escape(EntityType.Name);
		var EntityType_KeyMembers=EntityType.KeyMembers;
		var EntityType_KeyMembers_Count=EntityType_KeyMembers.Count;
		EntityKeyTypes.AppendLine                                            ("        [Serializable]");
		EntityKeyTypes.AppendLine                                            ("        public struct "+EntityType_Name+":IEquatable<"+EntityType_Name+">{");
		foreach(var KeyMember in EntityType_KeyMembers){
			EntityKeyTypes.Append                                            (SummaryComment(KeyMember,"            "));
			EntityKeyTypes.AppendLine                                        ("            public "+code.Escape(KeyMember.TypeUsage)+" "+code.Escape(KeyMember.Name)+"{get;}");
		}
		EntityKeyTypes.Append                                                ("            public "+EntityType_Name+"(");
		for(var a=0;;a++){
			var KeyMember=EntityType_KeyMembers[a];
			EntityKeyTypes.Append                                            (                code.Escape(KeyMember.TypeUsage)+" "+code.Escape(KeyMember.Name));
			if(a==EntityType_KeyMembers_Count-1)break;
			EntityKeyTypes.Append                                            (                ",");
		}
		EntityKeyTypes.AppendLine                                            ("){");
		foreach(var KeyMember in EntityType_KeyMembers){
			var Name=code.Escape(KeyMember.Name);
			EntityKeyTypes.AppendLine                                        ("                this."+Name+"="+Name+";");
		}
		EntityKeyTypes.AppendLine                                            ("            }");
		EntityKeyTypes.AppendLine                                            ("            internal void ToStringBuilder(StringBuilder sb){");
		for(var a=0;a<EntityType_KeyMembers_Count-1;a++){
			var Name=code.Escape(EntityType_KeyMembers[a].Name);
			EntityKeyTypes.AppendLine                                        ("                sb.Append(nameof("+Name+")+\"=\"+this."+Name+"+\",\");");
		}
		{
			var Name=code.Escape(EntityType_KeyMembers[EntityType_KeyMembers_Count-1].Name);
			EntityKeyTypes.AppendLine                                        ("                sb.Append(nameof("+Name+")+\"=\"+this."+Name+");");
		}
		EntityKeyTypes.AppendLine                                            ("            }");
		EntityKeyTypes.AppendLine                                            ("            public override string ToString(){");
		EntityKeyTypes.AppendLine                                            ("                var sb=new StringBuilder();");
		EntityKeyTypes.AppendLine                                            ("                this.ToStringBuilder(sb);");
		EntityKeyTypes.AppendLine                                            ("                return sb.ToString();");
		EntityKeyTypes.AppendLine                                            ("            }");
		EntityKeyTypes.AppendLine                                            ("            internal void InputHashCode(ref CRC32 CRC){");
		foreach(var KeyMember in EntityType_KeyMembers){
			EntityKeyTypes.AppendLine                                        ("                CRC.Input(this."+code.Escape(KeyMember.Name)+");");
		}
		EntityKeyTypes.AppendLine                                            ("            }");
		if(EntityType_KeyMembers_Count==1){
			var EntityType_KeyMembers_0=EntityType_KeyMembers[0];
			var Type=ef.UnderlyingClrType(EntityType_KeyMembers_0.TypeUsage.EdmType);
			if(Type==typeof(Int32)){
				EntityKeyTypes.AppendLine                                    ("            public override int GetHashCode()=>this."+code.Escape(EntityType_KeyMembers_0.Name)+";");
			}else if(Type==typeof(SByte)||Type==typeof(Byte)||Type==typeof(Int16)||Type==typeof(UInt16)||Type==typeof(Char)||Type==typeof(UInt32)||Type==typeof(Int64)||Type==typeof(UInt64)){
				EntityKeyTypes.AppendLine                                    ("            public override int GetHashCode()=>(int)this."+code.Escape(EntityType_KeyMembers_0.Name)+";");
			}else{
				EntityKeyTypes.AppendLine                                    ("            public override int GetHashCode()=>this."+code.Escape(EntityType_KeyMembers_0.Name)+".GetHashCode();");
			}
		}else{
			EntityKeyTypes.AppendLine                                        ("            public override int GetHashCode(){");
			EntityKeyTypes.AppendLine                                        ("                var CRC=new CRC32();");
			foreach(var KeyMember in EntityType_KeyMembers){
				EntityKeyTypes.AppendLine                                    ("                CRC.Input(this."+code.Escape(KeyMember.Name)+");");
			}
			EntityKeyTypes.AppendLine                                        ("                return CRC.GetHashCode();");
			EntityKeyTypes.AppendLine                                        ("            }");
		}
		EntityKeyTypes.AppendLine                                            ("            public bool Equals("+EntityType_Name+" other){");
		foreach(var KeyMember in EntityType_KeyMembers){
			var Name=code.Escape(KeyMember.Name);
			EntityKeyTypes.AppendLine                                        ("                if(!this."+Name+".Equals(other."+Name+"))return false;");
		}
		EntityKeyTypes.AppendLine                                            ("                return true;");
		EntityKeyTypes.AppendLine                                            ("            }");
		EntityKeyTypes.AppendLine                                            ("            public override bool Equals(Object obj)=>this.Equals(("+EntityType_Name+")obj);");
		EntityKeyTypes.AppendLine                                            ("            public static bool operator==("+EntityType_Name+" x,"+EntityType_Name+" y)=> x.Equals(y);");
		EntityKeyTypes.AppendLine                                            ("            public static bool operator!=("+EntityType_Name+" x,"+EntityType_Name+" y)=>!x.Equals(y);");
		EntityKeyTypes.AppendLine                                            ("        }");
	}
	EntityKeyTypes.AppendLine                                                ("    }");
	var sb0=new StringBuilder();
	var sb1=new StringBuilder();
	foreach(var EntityType in ListEntityType){
		string abstract_sealedキーワード;
		var EntityType_Abstract=EntityType.Abstract;
		var EntityType_BaseType=(EntityType)EntityType.BaseType;
		Boolean sealed_classか;
		if(EntityType_Abstract){
			abstract_sealedキーワード="abstract class";
			sealed_classか=false;
		}else{
			var ListEntityType_Count=ListEntityType.Count;
			var a=0;
			while(true){
				if(a==ListEntityType_Count){
					abstract_sealedキーワード="sealed class";
					sealed_classか=true;
					break;
				}
				if(ListEntityType[a].BaseType==EntityType){
					abstract_sealedキーワード="class";
					sealed_classか=false;
					break;
				}
				a++;
			}
		}
		var EntityType_Name=code.Escape(EntityType.Name);
		var 継承元を含んだEntityType_Properties=EntityType.Properties;
		var 継承元を含んだEntityType_Properties_Count=継承元を含んだEntityType_Properties.Count;
		var 継承元を含まないEntityType_Properties=継承元を含んだEntityType_Properties.Where(p => p.DeclaringType == EntityType).ToList();
		var 継承元を含まないEntityType_Properties_Count=継承元を含まないEntityType_Properties.Count;
		var 継承元のEntityType_Properties=継承元を含んだEntityType_Properties.Where(p => p.DeclaringType != EntityType).ToList();
		var 継承元のEntityType_Properties_Count=継承元のEntityType_Properties.Count;
		var EntityType_KeyMembers=EntityType.KeyMembers;
		var EntityType_KeyMembers_Count=EntityType_KeyMembers.Count;
		var EntityType_KeyMembersを除いた継承元を含まないEntityType_Properties=継承元を含まないEntityType_Properties.Except(EntityType_KeyMembers).Cast<EdmProperty>().ToList();
		var EntityType_KeyMembersを除いた継承元を含まないEntityType_Properties_Count=EntityType_KeyMembersを除いた継承元を含まないEntityType_Properties.Count;
		EntityTypes.AppendLine                                               ("    //Entity");
		EntityTypes.Append                                                   (SummaryComment(EntityType,"    "));
		EntityTypes.AppendLine                                               ("    [Serializable]");
		EntityTypes.Append                                                   ("    "+Accessibility.ForType(EntityType)+" "+abstract_sealedキーワード+" "+EntityType_Name+":");
		if(EntityType_BaseType==null){//継承していない
			EntityTypes.Append                                               ("global::Lite.Sets.EntityBase<Key."+EntityType_Name+","+EntityContainer_Name+">");
		}else{//継承したエンティティ
			EntityTypes.Append                                               (code.Escape(EntityType_BaseType.Name));
		}
		if(sealed_classか){
			EntityTypes.Append                                               (",IEquatable<"+EntityType_Name+">");
		}
		EntityTypes.AppendLine                                               ("{");
		if(EntityType_BaseType==null){
			foreach(var KeyMember in EntityType_KeyMembers){
				var Name=code.Escape(KeyMember.Name);
				EntityTypes.AppendLine                                       ("        public "+code.Escape(KeyMember.TypeUsage)+" "+Name+"=>this.PrimaryKey."+Name+";");
			}
		}
		foreach(var KeyMembersを除いた継承元を含まないProperty in EntityType_KeyMembersを除いた継承元を含まないEntityType_Properties){
			EntityTypes.AppendLine                                           ("        "+Accessibility.ForProperty(KeyMembersを除いた継承元を含まないProperty)+" "+code.Escape(KeyMembersを除いた継承元を含まないProperty.TypeUsage)+" "+code.Escape(KeyMembersを除いた継承元を含まないProperty)+"{get;}");
		}
		EntityTypes.AppendLine                                               ("        //値コンストラクタ");
		if(EntityType_Abstract){
			EntityTypes.Append                                               ("        protected ");
		}else{
			EntityTypes.Append                                               ("        public ");
		}
		EntityTypes.Append                                                   (                EntityType_Name+"(");
		{
			var a=0;
			while(true){
				var 継承元を含んだProperty=継承元を含んだEntityType_Properties[a];
				EntityTypes.Append                                           (code.Escape(継承元を含んだProperty.TypeUsage)+" "+code.Escape(継承元を含んだProperty.Name));
				a++;
				if(a==継承元を含んだEntityType_Properties_Count)break;
				EntityTypes.Append                                           (",");
			}
		}
		EntityTypes.Append                                                   ("):base(");
		if(EntityType_BaseType==null){
			EntityTypes.Append                                               ("new Key."+EntityType_Name+"(");
			var a=0;
			while(true){
				var KeyMember=EntityType_KeyMembers[a];
				EntityTypes.Append                                           (code.Escape(KeyMember.Name));
				a++;
				if(a==EntityType_KeyMembers_Count)break;
				EntityTypes.Append                                           (",");
			}
			EntityTypes.Append                                               (")");
		}else{
			var a=0;
			while(true){
				var 継承元のEntityType_Property=継承元のEntityType_Properties[a];
				var Name=code.Escape(継承元のEntityType_Property.Name);
				EntityTypes.Append                                           (Name+":"+Name);
				a++;
				if(a==継承元のEntityType_Properties_Count)break;
				EntityTypes.Append                                           (",");
			}
		}
		EntityTypes.AppendLine                                               ("){");
		//コンストラクタでの代入処理
		foreach(var KeyMembersを除いた継承元を含まないProperty in EntityType_KeyMembersを除いた継承元を含まないEntityType_Properties){
			var Name=code.Escape(KeyMembersを除いた継承元を含まないProperty);
			EntityTypes.AppendLine                                           ("            this."+Name+"="+Name+";");
		}
		EntityTypes.AppendLine                                               ("        }");
		if(EntityType_BaseType==null){
			EntityTypes.AppendLine                                           ("        public override int GetHashCode()=>this.PrimaryKey.GetHashCode();");
			EntityTypes.AppendLine                                           ("        public override string ToString(){");
			EntityTypes.AppendLine                                           ("            var sb=new StringBuilder();");
			EntityTypes.AppendLine                                           ("            this.ToStringBuilder(sb);");
			EntityTypes.AppendLine                                           ("            return sb.ToString();");
			EntityTypes.AppendLine                                           ("        }");
			if(sealed_classか){
				EntityTypes.AppendLine                                       ("        internal void ToStringBuilder(StringBuilder sb){");
			}else{
				EntityTypes.AppendLine                                       ("        internal virtual void ToStringBuilder(StringBuilder sb){");
			}
			EntityTypes.AppendLine                                           ("            this.PrimaryKey.ToStringBuilder(sb);");
		}else{
			EntityTypes.AppendLine                                           ("        internal override void ToStringBuilder(StringBuilder sb){");
			EntityTypes.AppendLine                                           ("            base.ToStringBuilder(sb);");
		}
		foreach(var 継承元を含まないProperty in 継承元を含まないEntityType_Properties){
			var Name=code.Escape(継承元を含まないProperty.Name);
			EntityTypes.AppendLine                                           ("            sb.Append(\",\"+nameof("+Name+")+\"=\"+this."+Name+");");
		}
		EntityTypes.AppendLine                                               ("        }");
		if(sealed_classか){
			EntityTypes.AppendLine                                           ("        public static bool operator==("+EntityType_Name+" a,"+EntityType_Name+" b)=>a?.Equals(b)??b is null;");
			EntityTypes.AppendLine                                           ("        public static bool operator!=("+EntityType_Name+" a,"+EntityType_Name+" b)=>!(a==b);");
			EntityTypes.AppendLine                                           ("        public override bool Equals(object other)=>this.Equals(other as "+EntityType_Name+");");
			EntityTypes.AppendLine                                           ("        public bool Equals("+EntityType_Name+" other){");
		}else{
			EntityTypes.AppendLine                                           ("        public override bool Equals(object obj)=>this.ProtectedEquals(obj as "+EntityType_Name+");");
			EntityTypes.AppendLine                                           ("        protected bool ProtectedEquals("+EntityType_Name+" other){");
		}
		if(EntityType_BaseType==null){
			EntityTypes.AppendLine                                           ("            if(other is null)return false;");
			EntityTypes.AppendLine                                           ("            if(!this.PrimaryKey.Equals(other.PrimaryKey))return false;");
		}else{
			EntityTypes.AppendLine                                           ("            if(!base.ProtectedEquals(other))return false;");
		}
		for(var a=0;a<継承元を含まないEntityType_Properties_Count;a++){
			var Name=code.Escape(継承元を含まないEntityType_Properties[a].Name);
			EntityTypes.AppendLine                                           ("            if(!this."+Name+".Equals(other."+Name+"))return false;");
		}
		EntityTypes.AppendLine                                               ("            return true;");
		EntityTypes.AppendLine                                               ("        }");
		AddRelationship.Clear();
		ConcurrentAddRelationship.Clear();
		RemoveRelationship.Clear();
		ConcurrentRemoveRelationship.Clear();
		AddRelationship.AppendLine                                           ("        public override void AddRelationship("+EntityContainer_Name+" Container){");
		ConcurrentAddRelationship.AppendLine                                 ("        public override void ConcurrentAddRelationship("+EntityContainer_Name+" Container){");
		RemoveRelationship.AppendLine                                        ("        public override void RemoveRelationship("+EntityContainer_Name+" Container){");
		ConcurrentRemoveRelationship.AppendLine                              ("        public override void ConcurrentRemoveRelationship("+EntityContainer_Name+" Container){");
		if(EntityType_BaseType!=null){
			AddRelationship.AppendLine                                       ("            base.AddRelationship(Container);");
			ConcurrentAddRelationship.AppendLine                             ("            base.ConcurrentAddRelationship(Container);");
			RemoveRelationship.AppendLine                                    ("            base.RemoveRelationship(Container);");
			ConcurrentRemoveRelationship.AppendLine                          ("            base.ConcurrentRemoveRelationship(Container);");
		}
		var NavigationProperties=EntityType.NavigationProperties;
		foreach(var NavigationProperty in NavigationProperties) {
			if(NavigationProperty.DeclaringType!=EntityType){
				continue;
			}
			var AssociationType=(AssociationType)NavigationProperty.RelationshipType;
			var ReferentialConstraints=AssociationType.ReferentialConstraints;
			if(ReferentialConstraints.Count==0){
			}else{
				foreach(var ReferentialConstraint in ReferentialConstraints) {
					var FromProperties=ReferentialConstraint.FromProperties;
					var ToProperties=ReferentialConstraint.ToProperties;
					var FromRole=ReferentialConstraint.FromRole;
					var ToRole=ReferentialConstraint.ToRole;
					RelationshipEndMember RoleI=null,RoleU=null;
					ReadOnlyMetadataCollection<EdmProperty> PropertiesI,PropertiesU;
					if(EntityType==FromRole.GetEntityType()) {
						RoleI=FromRole;
						RoleU=ToRole;
						PropertiesI=FromProperties;
						PropertiesU=ToProperties;
					}else{
						RoleI=ToRole;
						RoleU=FromRole;
						PropertiesI=ToProperties;
						PropertiesU=FromProperties;
					}
					var ToEntityType=PropertiesU[0].DeclaringType;
					var ToBaseEntityType=(EntityType)GetRootEdmType(ToEntityType);
					if(RoleI.RelationshipMultiplicity==RelationshipMultiplicity.Many){
						sb0.Clear();
						foreach(var PropertyI in PropertiesI){
							if(PropertyI.Nullable){
								sb0.Append("this.");
								sb0.Append(code.Escape(PropertyI));
								sb0.Append("!=null&&");
							}
						}
						sb1.Clear();
						if(sb0.Length>0){
							sb0.Length-=2;
							sb1.Append                                       ("            if(");
							sb1.Append                                       (sb0.ToString());
							sb1.Append                                       (")");
						}else{
							sb1.Append                                       ("            ");
						}
						sb1.Append                                           ("(this.");
						sb1.Append                                           (code.Escape(NavigationProperty));
						sb1.Append                                           ("=Container.");
						sb1.Append                                           (code.Escape(Dictionary_EntityType_EntitySet[ToBaseEntityType]));
						sb1.Append                                           (".GetReference<");
						sb1.Append                                           (code.Escape(NavigationProperty.TypeUsage));
						sb1.Append                                           (">(new Key.");
						sb1.Append                                           (code.Escape(ToBaseEntityType.Name));
						sb1.Append                                           ("(");
						foreach(var PropertyI in PropertiesI){
							sb1.Append                                       ("this.");
							sb1.Append                                       (code.Escape(PropertyI));
							if(PropertyI.Nullable){
								if(ef.UnderlyingClrType(PropertyI.TypeUsage.EdmType).IsValueType){
									sb1.Append                               (".Value,");
								}else{
									sb1.Append                               (",");
								}
							}else{
								sb1.Append                                   (",");
							}
						}
						sb1.Length--;
						sb1.Append                                           (")))");
						if(RoleU.RelationshipMultiplicity==RelationshipMultiplicity.ZeroOrOne){
							sb1.Append                                       ("?");
						}
						sb1.Append                                           (".");
						foreach(var EntityType0 in ListEntityType){
							if(EntityType0==EntityType){
								continue;
							}
							foreach(var NavigationProperty0 in EntityType0.NavigationProperties){
								if(NavigationProperty0.DeclaringType!=EntityType0){
									continue;
								}
								if(NavigationProperty.FromEndMember==NavigationProperty0.ToEndMember&&NavigationProperty.FromEndMember.TypeUsage==NavigationProperty0.ToEndMember.TypeUsage){
									sb1.Append                               ("_"+code.Escape(NavigationProperty0)+".");
									var s1=sb1.ToString();
									AddRelationship.Append                   (s1);
									AddRelationship.AppendLine               ("VoidAdd(this);");
									ConcurrentAddRelationship.Append         (s1);
									ConcurrentAddRelationship.AppendLine ("ConcurrentVoidAdd(this);");
									var オペランド="this."+code.Escape(NavigationProperty);
									sb1.Clear();
									sb1.Append                               ("            this.");
									sb1.Append                               (                  code.Escape(NavigationProperty)+"._"+code.Escape(NavigationProperty0)+".");
									var s2=sb1.ToString();
									RemoveRelationship.Append                (s2);
									RemoveRelationship.AppendLine            ("Remove(this);");
									ConcurrentRemoveRelationship.Append      (s2);
									ConcurrentRemoveRelationship.AppendLine  ("ConcurrentRemove(this);");
								}
							}
						}
					}
				}
			}
		}
		EntityTypes.Append                                                   (AddRelationship.ToString());
		EntityTypes.AppendLine                                               ("        }");
		EntityTypes.Append                                                   (ConcurrentAddRelationship.ToString());
		EntityTypes.AppendLine                                               ("        }");
		EntityTypes.Append                                                   (RemoveRelationship.ToString());
		EntityTypes.AppendLine                                               ("        }");
		EntityTypes.Append                                                   (ConcurrentRemoveRelationship.ToString());
		EntityTypes.AppendLine                                               ("        }");
		foreach(var NavigationProperty in NavigationProperties) {
			var FromEndMember_EntityType=NavigationProperty.FromEndMember.GetEntityType();
			if(EntityType!=FromEndMember_EntityType)continue;//親クラスで実装された場合、このクラスでは無視する。
			EntityTypes.AppendLine                                           ("        //"+code.Escape(NavigationProperty)+"(NavigationProperty)");
			EntityTypes.Append                                               (SummaryComment(NavigationProperty,"        "));
			var NavigationProperty_Name=code.Escape(NavigationProperty);
			var AssociationType=(AssociationType)NavigationProperty.RelationshipType;
			var AssociationType_Name=code.Escape(AssociationType.Name);
			var ReferentialConstraints=AssociationType.ReferentialConstraints;
			if(ReferentialConstraints.Count==0){//多対多
				var ToEndMember_EntityType=NavigationProperty.ToEndMember.GetEntityType();
				//var ToEndMember_AbstractEntityType=GetRootEdmType(ToEndMember_EntityType);
				var ToEndMember_EntityType_Name=code.Escape(ToEndMember_EntityType.Name);
				EntityTypes.AppendLine                                       ("        internal readonly Set<"+ToEndMember_EntityType_Name+">_"+NavigationProperty_Name+"=new Set<"+ToEndMember_EntityType_Name+">();");
				EntityTypes.AppendLine                                       ("        public ASet<"+ToEndMember_EntityType_Name+">"+NavigationProperty_Name+"=>this._"+NavigationProperty_Name+";");
			}else{
				foreach(var ReferentialConstraint in ReferentialConstraints) {
					var FromProperties=ReferentialConstraint.FromProperties;
					var ToProperties=ReferentialConstraint.ToProperties;
					var FromRole=ReferentialConstraint.FromRole;
					var ToRole=ReferentialConstraint.ToRole;
					RelationshipEndMember RoleI=null,RoleU=null;
					ReadOnlyMetadataCollection<EdmProperty> PropertiesI,PropertiesU;
					if(EntityType==FromRole.GetEntityType()) {
						RoleI=FromRole;
						RoleU=ToRole;
						PropertiesI=FromProperties;
						PropertiesU=ToProperties;
						EntityTypes.AppendLine                               ("        //IFrom,UTo");
					} else {
						RoleI=ToRole;
						RoleU=FromRole;
						PropertiesI=ToProperties;
						PropertiesU=FromProperties;
						EntityTypes.AppendLine                               ("        //ITo,UFrom");
					}
					var RoleI_RelationshipMultiplicity=RoleI.RelationshipMultiplicity;
					var RoleU_RelationshipMultiplicity=RoleU.RelationshipMultiplicity;
					EntityTypes.AppendLine                                   ("        //リレーションシップ");
					var RoleU_EntityType=RoleU.GetEntityType();
					var RoleU_EntityType_Name=code.Escape(RoleU_EntityType);
					var EntityTypeU=PropertiesU[0].DeclaringType;
					var EntityTypeI_Name=EntityType.Name;
					var EntityTypeU_Name=EntityTypeU.Name;
					var PropertiesU_Count_1=PropertiesU.Count-1;
					var BaseEntityTypeU=GetRootEdmType(EntityTypeU);
					var ToTypeName=BaseEntityTypeU.Name;
					var ToEndMember_AbstractEntitySet=Dictionary_EdmType_EntitySet[BaseEntityTypeU];
					if(RoleU_RelationshipMultiplicity==RelationshipMultiplicity.One) {
						if(RoleI_RelationshipMultiplicity==RelationshipMultiplicity.One){
							EntityTypes.AppendLine                           ("        //1→1");
						}else if(RoleI_RelationshipMultiplicity==RelationshipMultiplicity.Many){
							EntityTypes.AppendLine                           ("        //*→1");
						}else{
							EntityTypes.AppendLine                           ("        //0..1→1");
						}
						EntityTypes.AppendLine                               ("        [field: NonSerialized]");
						EntityTypes.AppendLine                               ("        public "+RoleU_EntityType_Name+" "+NavigationProperty_Name+"{get;private set;}");
						EntityTypes.AppendLine                               ("        //外部キー");
						EntityTypes.AppendLine                               ("        public Key."+ToTypeName+" "+AssociationType_Name+"=>this."+NavigationProperty_Name+".PrimaryKey;");
					}else if(RoleU_RelationshipMultiplicity==RelationshipMultiplicity.Many){
						if(RoleI_RelationshipMultiplicity==RelationshipMultiplicity.One){
							EntityTypes.AppendLine                           ("        //1→*");
						}else if(RoleI_RelationshipMultiplicity==RelationshipMultiplicity.Many){
							EntityTypes.AppendLine                           ("        *→*はここには通らないはず。");
						}else{
							EntityTypes.AppendLine                           ("        //0..1→*");
						}
						EntityTypes.AppendLine                               ("        [NonSerialized]");
						EntityTypes.AppendLine                               ("        internal readonly Set<"+RoleU_EntityType_Name+">_"+NavigationProperty_Name+"=new Set<"+RoleU_EntityType_Name+">();");
						EntityTypes.AppendLine                               ("        public ASet<"+RoleU_EntityType_Name+">"+NavigationProperty_Name+"=>this._"+NavigationProperty_Name+";");
					}else{
						if(RoleI_RelationshipMultiplicity==RelationshipMultiplicity.One){
							EntityTypes.AppendLine                           ("        //1→0..1");
						}else if(RoleI_RelationshipMultiplicity==RelationshipMultiplicity.Many){
							//EntityTypes.AppendLine                         ("        *→0..1はここには通らないはず。");
						}else{
							EntityTypes.AppendLine                           ("        0..1→0..1はここには通らないはず。");
						}
						EntityTypes.AppendLine                               ("        //将来?にしたい");
						EntityTypes.AppendLine                               ("        [field: NonSerialized]");
						EntityTypes.AppendLine                               ("        public "+RoleU_EntityType_Name+" "+NavigationProperty_Name+"{get;private set;}");
						EntityTypes.AppendLine                               ("        //?外部キー");
						EntityTypes.AppendLine                               ("        public Key."+ToTypeName+" "+AssociationType_Name+"=>this."+NavigationProperty_Name+".PrimaryKey;");
					}
				}
			}
		}
		EntityTypes.AppendLine                                               ("    }");
	}
	AssociationTypes.AppendLine                                              ("    //多対多のアソシエーションクラスを記述します。");
	foreach(var AssociationType in ListAssociationType){
		var AssociationType_Name=code.Escape(AssociationType.Name);
		AssociationTypes.Append                                              (SummaryComment(AssociationType,"    "));
		AssociationTypes.AppendLine                                          ("    [Serializable]");
		var AssociationEndMembers=AssociationType.AssociationEndMembers;
		var AssociationEndMembers_1=AssociationEndMembers[0];
		var AssociationEndMembers_2=AssociationEndMembers[1];
		var AssociationEndMember_1_EntityType=AssociationEndMembers_1.GetEntityType();
		var AssociationEndMember_1_EntityType_NavigationProperties=AssociationEndMember_1_EntityType.NavigationProperties;
		var AssociationType_AssociationEndMember=AssociationType.AssociationEndMembers;
		var NavigationProperties_Name=new String[2];
		var c=0;
		foreach(var a in AssociationType.AssociationEndMembers){
			foreach(var AssociationEndMember in AssociationEndMembers){
				foreach(var b in AssociationEndMember.GetEntityType().NavigationProperties){
					if(a!=b.FromEndMember){
						continue;
					}
					NavigationProperties_Name[c++]=code.Escape(b);;
				}
			}
		}
		終了:
		var AssociationEndMember_2_EntityType=AssociationEndMembers_2.GetEntityType();
		var TValue1=code.Escape(AssociationEndMember_1_EntityType);
		var TValue2=code.Escape(AssociationEndMember_2_EntityType);
		var AssociationEndMember_1_BaseType=GetRootEdmType(AssociationEndMember_1_EntityType);
		var AssociationEndMember_2_BaseType=GetRootEdmType(AssociationEndMember_2_EntityType);
		var TKey1="Key."+code.Escape(AssociationEndMember_1_BaseType);
		var TKey2="Key."+code.Escape(AssociationEndMember_2_BaseType);
		var AssociationEndMember_1_Name=code.Escape(AssociationEndMembers_1.Name);
		var AssociationEndMember_2_Name=code.Escape(AssociationEndMembers_2.Name);
		AssociationTypes.AppendLine                                          ("    public struct "+AssociationType_Name+":IEquatable<"+AssociationType_Name+">,IAssociation<"+TKey1+","+TValue1+","+TKey2+","+TValue2+","+EntityContainer_Name+">{");
		AssociationTypes.AppendLine                                          ("        public "+TKey1+" Key1{get;private set;}");
		AssociationTypes.AppendLine                                          ("        public "+TKey2+" Key2{get;private set;}");
		AssociationTypes.AppendLine                                          ("        public "+TValue1+" "+AssociationEndMember_1_Name+"=>this.Value1;");
		AssociationTypes.AppendLine                                          ("        public "+TValue2+" "+AssociationEndMember_2_Name+"=>this.Value2;");
		AssociationTypes.AppendLine                                          ("        public "+TValue1+" Value1{get;private set;}");
		AssociationTypes.AppendLine                                          ("        public "+TValue2+" Value2{get;private set;}");
		AssociationTypes.AppendLine                                          ("        public "+AssociationType_Name+"("+TKey1+" Key1,"+TKey2+" Key2){");
		AssociationTypes.AppendLine                                          ("            this.Key1=Key1;");
		AssociationTypes.AppendLine                                          ("            this.Key2=Key2;");
		AssociationTypes.AppendLine                                          ("            this.Value1=null;");
		AssociationTypes.AppendLine                                          ("            this.Value2=null;");
		AssociationTypes.AppendLine                                          ("        }");
		AssociationTypes.AppendLine                                          ("        public "+AssociationType_Name+"("+TValue1+" "+AssociationEndMember_1_Name+","+TValue2+" "+AssociationEndMember_2_Name+"){");
		AssociationTypes.AppendLine                                          ("            this.Key1="+AssociationEndMember_1_Name+".PrimaryKey;");
		AssociationTypes.AppendLine                                          ("            this.Key2="+AssociationEndMember_2_Name+".PrimaryKey;");
		AssociationTypes.AppendLine                                          ("            this.Value1="+AssociationEndMember_1_Name+";");
		AssociationTypes.AppendLine                                          ("            this.Value2="+AssociationEndMember_2_Name+";");
		AssociationTypes.AppendLine                                          ("        }");
		AssociationTypes.AppendLine                                          ("        public bool Equals("+AssociationType_Name+" other)=>");
		AssociationTypes.AppendLine                                          ("            this."+AssociationEndMember_1_Name+".Equals(other."+AssociationEndMember_1_Name+")&&");
		AssociationTypes.AppendLine                                          ("            this."+AssociationEndMember_2_Name+".Equals(other."+AssociationEndMember_2_Name+");");
		AssociationTypes.AppendLine                                          ("        public override bool Equals(object obj)=>obj is "+AssociationType_Name+" other&& this.Equals(other);");
		AssociationTypes.AppendLine                                          ("        public override int GetHashCode()=>");
		AssociationTypes.AppendLine                                          ("            this.Key1.GetHashCode()^");
		AssociationTypes.AppendLine                                          ("            this.Key2.GetHashCode();");
		AssociationTypes.AppendLine                                          ("        public static bool operator==("+AssociationType_Name+" a,"+AssociationType_Name+" b)=> a.Equals(b);");
		AssociationTypes.AppendLine                                          ("        public static bool operator!=("+AssociationType_Name+" a,"+AssociationType_Name+" b)=>!a.Equals(b);");
		AssociationTypes.AppendLine                                          ("        public override string ToString(){");
		AssociationTypes.AppendLine                                          ("            var sb=new StringBuilder();");
		AssociationTypes.AppendLine                                          ("            this."+AssociationEndMember_1_Name+".ToStringBuilder(sb);");
		AssociationTypes.AppendLine                                          ("            this."+AssociationEndMember_2_Name+".ToStringBuilder(sb);");
		AssociationTypes.AppendLine                                          ("            return sb.ToString();");
		AssociationTypes.AppendLine                                          ("        }");
		var NavigationProperties0_Name=NavigationProperties_Name[0];
		var NavigationProperties1_Name=NavigationProperties_Name[1];
		var Set1=code.Escape(Dictionary_EntityType_EntitySet[(EntityType)GetRootEdmType(AssociationEndMember_1_EntityType)]);
		var Set2=code.Escape(Dictionary_EntityType_EntitySet[(EntityType)GetRootEdmType(AssociationEndMember_2_EntityType)]);
		AssociationTypes.AppendLine                                          ("        public void AddRelationship("+EntityContainer_Name+" Container){");
		AssociationTypes.AppendLine                                          ("            (this.Value1=Container."+Set1+".GetReference<"+TValue1+">(this.Key1))._"+NavigationProperties0_Name+".VoidAdd(this.Value2);");
		AssociationTypes.AppendLine                                          ("            (this.Value2=Container."+Set2+".GetReference<"+TValue2+">(this.Key2))._"+NavigationProperties1_Name+".VoidAdd(this.Value1);");
		AssociationTypes.AppendLine                                          ("        }");
		AssociationTypes.AppendLine                                          ("        public void ConcurrentAddRelationship("+EntityContainer_Name+" Container){");
		AssociationTypes.AppendLine                                          ("            (this.Value1=Container."+Set1+".GetReference<"+TValue1+">(this.Key1))._"+NavigationProperties0_Name+".ConcurrentVoidAdd(this.Value2);");
		AssociationTypes.AppendLine                                          ("            (this.Value2=Container."+Set2+".GetReference<"+TValue2+">(this.Key2))._"+NavigationProperties1_Name+".ConcurrentVoidAdd(this.Value1);");
		AssociationTypes.AppendLine                                          ("        }");
		AssociationTypes.AppendLine                                          ("        public void RemoveRelationship("+EntityContainer_Name+" Container){");
		AssociationTypes.AppendLine                                          ("            Container."+Set1+".GetReference<"+TValue1+">(this.Key1)._"+NavigationProperties0_Name+".Remove(this.Value2);");
		AssociationTypes.AppendLine                                          ("            Container."+Set2+".GetReference<"+TValue2+">(this.Key2)._"+NavigationProperties1_Name+".Remove(this.Value1);");
		AssociationTypes.AppendLine                                          ("        }");
		AssociationTypes.AppendLine                                          ("        public void ConcurrentRemoveRelationship("+EntityContainer_Name+" Container){");
		AssociationTypes.AppendLine                                          ("            Container."+Set1+".GetReference<"+TValue1+">(this.Key1)._"+NavigationProperties0_Name+".ConcurrentRemove(this.Value2);");
		AssociationTypes.AppendLine                                          ("            Container."+Set2+".GetReference<"+TValue2+">(this.Key2)._"+NavigationProperties1_Name+".ConcurrentRemove(this.Value1);");
		AssociationTypes.AppendLine                                          ("        }");
		AssociationTypes.AppendLine                                          ("    }");
	}
	Write(EntityProperties.ToString());
	Write(ctor.ToString());
	Write(Init.ToString());
	Write(Read_.ToString());
	Write(Write_.ToString());
	Write(Assign.ToString());
	Write(Commit.ToString());
	Write(UpdateRelationship.ToString());
	Write(RelationValidate0.ToString());
	Write(RelationValidate1.ToString());
	Write(EntityKeyTypes.ToString());
	Write(EntityTypes.ToString());
	Write(AssociationTypes.ToString());
	Write(ComplexTypes.ToString());
	Write(EnumTypes.ToString());
	WriteLine                                                                ("}");
#>


<#+
//テンプレートのパブリック プロパティを宣言します。
public string SourceCsdlPath;
public string ModelNamespace;
public EdmItemCollection ItemCollection;
public IEnumerable<string> ReferenceCsdlPaths;
public Nullable<bool> CreateContextAddToMethods;
public Dictionary<string, string> EdmToObjectNamespaceMap= new Dictionary<string, string>();
private Dictionary<EdmType,EntitySet> Dictionary_EdmType_EntitySet=new Dictionary<EdmType,EntitySet>();
private Dictionary<EdmType,AssociationSet> Dictionary_EdmType_AssociationSet=new Dictionary<EdmType,AssociationSet>();
////////  テンプレートのプライベート プロパティを宣言します。
static System.Resources.ResourceManager ResourceManager{
	get{
		if(_resourceManager == null){
			var resourceManager = new System.Resources.ResourceManager("System.Data.Entity.Design", typeof(System.Data.Entity.Design.MetadataItemCollectionFactory).Assembly);
			System.Threading.Interlocked.CompareExchange(ref _resourceManager, resourceManager, null);
		}
		return _resourceManager;
	}
}
static System.Resources.ResourceManager _resourceManager;
private static string GetResourceString(string resourceName){
	return ResourceManager.GetString(resourceName,null); //  既定のカルチャを取得します。
}
void ApplyUserSettings(UserSettings userSettings){
	//  テンプレートの UserSettings をセットアップします。
	if(SourceCsdlPath == null)
	{
#if !PREPROCESSED_TEMPLATE
		if(userSettings.SourceCsdlPath == "$" + "edmxInputFile" + "$")
		{
			Errors.Add(new System.CodeDom.Compiler.CompilerError(Host.TemplateFile, 0, 0, "",
				GetResourceString("Template_ReplaceVsItemTemplateToken")));
			return;
		}
		SourceCsdlPath = Host.ResolvePath(userSettings.SourceCsdlPath);
#else
		SourceCsdlPath = userSettings.SourceCsdlPath;
#endif
	}
	// normalize the path, remove ..\ from it
	SourceCsdlPath = Path.GetFullPath(SourceCsdlPath);
	if(ReferenceCsdlPaths == null)
	{
		ReferenceCsdlPaths = userSettings.ReferenceCsdlPaths;
	}
	if(!CreateContextAddToMethods.HasValue)
	{
		CreateContextAddToMethods = userSettings.CreateContextAddToMethods;
	}
	DefaultSummaryComment = GetResourceString("Template_CommentNoDocumentation");
}
class UserSettings{
	public string SourceCsdlPath{ get; set; }
	public string[] ReferenceCsdlPaths{ get; set; }
	public bool FullyQualifySystemTypes{ get; set; }
	public bool CreateContextAddToMethods{ get; set; }
	public bool CamelCaseFields{ get; set; }
}
IEnumerable<T> GetSourceSchemaTypes<T>() where T : GlobalItem{
	if(Path.GetExtension(SourceCsdlPath) != ".edmx")
	{
		return ItemCollection.GetItems<T>().Where(e => e.MetadataProperties.Any(mp => mp.Name == "SchemaSource" && (string)mp.Value == SourceCsdlPath));
	}
	else
	{
		return ItemCollection.GetItems<T>();
	}
}
string GetObjectNamespace(string csdlNamespaceName){
	string objectNamespace;
	if(EdmToObjectNamespaceMap.TryGetValue(csdlNamespaceName, out objectNamespace))
	{
		return objectNamespace;
	}
	return csdlNamespaceName;
}
void UpdateObjectNamespaceMap(string objectNamespace){
	if(objectNamespace != ModelNamespace && !EdmToObjectNamespaceMap.ContainsKey(ModelNamespace)){
		EdmToObjectNamespaceMap.Add(ModelNamespace, objectNamespace);    
	}
}
string DefaultSummaryComment{ get; set; }
string SummaryComment(MetadataItem item,string indent){
	var item_Documentation=item.Documentation;
	if(item_Documentation==null)return"";
	var sb=new StringBuilder();
	indent+="/// ";
	sb.Append(indent);sb.Append("<summary>");sb.Append(item_Documentation.Summary);sb.AppendLine("</summary>");
	sb.Append(indent);sb.Append("<remarks>");sb.Append(item_Documentation.LongDescription);sb.AppendLine("</remarks>");
	return sb.ToString();
}
static EdmType GetRootEdmType(EdmType EdmType){
	while(EdmType.BaseType!=null&&EdmType.BaseType.FullName!="System.object"){
		EdmType=EdmType.BaseType;
	}
	return EdmType;
}
class EntityContainer2{
	public EntityContainer EntityContainer;
	public List<EntitySet>ListEntitySet=new List<EntitySet>();
	public List<AssociationSet>ListAssociationSet=new List<AssociationSet>();
	public EntityContainer2(EntityContainer EntityContainer){
		this.EntityContainer=EntityContainer;
	}
}
private List<EntityContainer2>ListEntityContainer2=new List<EntityContainer2>();
private List<EntityType>ListEntityType=new List<EntityType>();
private List<AssociationType>ListAssociationType=new List<AssociationType>();
private Dictionary<EntityType,EntitySet>Dictionary_EntityType_EntitySet=new Dictionary<EntityType,EntitySet>();
#>
