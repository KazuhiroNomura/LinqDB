<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DynamicMethodでFaultはサポートされていない" xml:space="preserve">
    <value>DynamicMethodでFaultはサポートされていない。</value>
  </data>
  <data name="DynamicMethodでFilterはサポートされていない" xml:space="preserve">
    <value>DynamicMethodでFilterはサポートされていない。</value>
  </data>
  <data name="_バイト受信した_バイト受信できなかった" xml:space="preserve">
    <value>{0}バイト受信した。{1}バイト受信できなかった。</value>
  </data>
  <data name="クライアントでChainStatusが空でない配列を返した" xml:space="preserve">
    <value>クライアントでChainStatusが空でない配列を返した。</value>
  </data>
  <data name="クライアントでサーバー証明書の検証に成功した" xml:space="preserve">
    <value>クライアントでサーバー証明書の検証に成功した。</value>
  </data>
  <data name="クライアントで証明書が利用できなかった" xml:space="preserve">
    <value>クライアントで証明書が利用できない。</value>
  </data>
  <data name="クライアントで証明書名が不一致だった" xml:space="preserve">
    <value>クライアントで証明書名が不一致だった。</value>
  </data>
  <data name="サーバーでChainStatusが空でない配列を返した" xml:space="preserve">
    <value>サーバーでChainStatusが空でない配列を返した。</value>
  </data>
  <data name="サーバーでサーバー証明書の検証に成功した" xml:space="preserve">
    <value>サーバーでサーバー証明書の検証に成功した。</value>
  </data>
  <data name="サーバーで証明書が利用できなかった" xml:space="preserve">
    <value>サーバーで証明書が利用できなかった。</value>
  </data>
  <data name="サーバーで証明書名が不一致だった" xml:space="preserve">
    <value>サーバーで証明書名が不一致だった。</value>
  </data>
  <data name="スキーマとテーブルが発見できなかった" xml:space="preserve">
    <value>スキーマとテーブルが発見できなかった。</value>
  </data>
  <data name="データ長が読み込めなかった" xml:space="preserve">
    <value>データ長が読み込めなかった。</value>
  </data>
  <data name="トランザクション数が1のときCommit出来なかった" xml:space="preserve">
    <value>トランザクション数が1のときCommit出来ない。</value>
  </data>
  <data name="トランザクション数が1未満のときRollback出来なかった" xml:space="preserve">
    <value>トランザクション数が1未満のときRollback出来ない。</value>
  </data>
  <data name="トランザクション数が_を超えた" xml:space="preserve">
    <value>トランザクション数が{0}を超えた。</value>
  </data>
  <data name="ハッシュ値が一致しなかった" xml:space="preserve">
    <value>ハッシュ値が一致しなかった。</value>
  </data>
  <data name="リクエストID_レスポンスID_が一致しなかった" xml:space="preserve">
    <value>リクエストID{0},レスポンスID{1}が一致しない。</value>
  </data>
  <data name="リモート先から_を受信することを期待したが_だった" xml:space="preserve">
    <value>リモート先から{0}を受信することを期待したが{1}だった。</value>
  </data>
  <data name="リモート先で例外が発生した" xml:space="preserve">
    <value>リモート先で例外が発生した。</value>
  </data>
  <data name="制約エラー" xml:space="preserve">
    <value>制約エラー</value>
  </data>
  <data name="受信ヘッダー_は不正だった" xml:space="preserve">
    <value>受信ヘッダー{0}は不正である。</value>
  </data>
  <data name="自由変数定数ラムダ式が多すぎた" xml:space="preserve">
    <value>自由変数、定数、ラムダ式が多すぎる。</value>
  </data>
</root>