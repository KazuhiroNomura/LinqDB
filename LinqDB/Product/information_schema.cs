namespace LinqDB.Product;

public abstract class information_schema {
    public abstract string Database { get;}
    public virtual string SQL_Schema =>@"
        SELECT SCHEMA_NAME
        FROM INFORMATION_SCHEMA.SCHEMATA
        ORDER BY SCHEMA_NAME
    ";

    public virtual string SQL_Table=>@"
        SELECT TABLE_NAME
        FROM INFORMATION_SCHEMA.TABLES
        WHERE TABLE_TYPE='BASE TABLE' AND TABLE_SCHEMA=@SCHEMA
    ";
    public virtual string SQL_View=>@"
        SELECT TABLE_NAME,VIEW_DEFINITION
        FROM INFORMATION_SCHEMA.VIEWS
        WHERE TABLE_SCHEMA=@SCHEMA
        ORDER BY TABLE_NAME
    ";
    public virtual string SQL_ScalarFunction=>@"
        SELECT TABLE_NAME,FUNCTION_DEFINITIONというのはない
        FROM INFORMATION_SCHEMA.VIEWS
        WHERE TABLE_SCHEMA=@SCHEMA
        ORDER BY TABLE_NAME
    ";
    public virtual string SQL_TableFunction=>@"
        SELECT TABLE_NAME,VIEW_DEFINITION
        FROM INFORMATION_SCHEMA.VIEWS
        WHERE TABLE_SCHEMA=@SCHEMA
        ORDER BY TABLE_NAME
    ";
    public virtual string SQL_View_ScalarFunction_TableFunction =>@"
        SELECT TABLE_NAME,VIEW_DEFINITION
        FROM INFORMATION_SCHEMA.VIEWS
        WHERE TABLE_SCHEMA=@SCHEMA
        ORDER BY TABLE_NAME
    ";
    public virtual string SQL_Procedure =>@"
        SELECT TABLE_NAME,VIEW_DEFINITION
        FROM INFORMATION_SCHEMA.VIEWS
        WHERE TABLE_SCHEMA=@SCHEMA
        ORDER BY TABLE_NAME
    ";
    public abstract string SQL_Function_Parameter { get; }
    public virtual string SQL_View_FunctionTable_Column =>@"
        SELECT COLUMN_NAME,DATA_TYPE,IS_NULLABLE
        FROM INFORMATION_SCHEMA.COLUMNS
        WHERE TABLE_SCHEMA=@SCHEMA AND TABLE_NAME=@NAME
        ORDER BY ORDINAL_POSITION
    ";
    public virtual string SQLScalarFunction =>@"
        SELECT SPECIFIC_NAME,ROUTINE_DEFINITION
        FROM INFORMATION_SCHEMA.ROUTINES
        WHERE ROUTINE_TYPE='FUNCTION' AND SPECIFIC_SCHEMA=@SCHEMA
    ";
    public virtual string SQLProcedure =>@"
        SELECT SPECIFIC_NAME,ROUTINE_DEFINITION
        FROM INFORMATION_SCHEMA.ROUTINES
        WHERE ROUTINE_TYPE='PROCEDURE' AND SPECIFIC_SCHEMA=@SCHEMA
    ";
    public virtual string SQL_Trigger =>@"
        SELECT ''TRIGGER_NAME,''EVENT_MANIPLULATION,''EVENT_OBJECT_NAME,''ACTION_STATEMENT
        WHERE 1=0
    ";
    public virtual string SQL_Table_Column =>@"
        SELECT C.DATA_TYPE,C.COLUMN_NAME,CAST(CASE WHEN C.IS_NULLABLE='YES'THEN 1 ELSE 0 END AS BIT)IS_NULLABLE,(
            SELECT COUNT(*)
            FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCU
            JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC ON KCU.CONSTRAINT_CATALOG=TC.CONSTRAINT_CATALOG AND KCU.CONSTRAINT_SCHEMA=TC.CONSTRAINT_SCHEMA  AND KCU.CONSTRAINT_NAME=TC.CONSTRAINT_NAME AND TC.CONSTRAINT_TYPE='PRIMARY KEY'
            WHERE C.TABLE_CATALOG=KCU.CONSTRAINT_CATALOG AND C.TABLE_SCHEMA=KCU.CONSTRAINT_SCHEMA AND C.TABLE_NAME=KCU.TABLE_NAME AND C.COLUMN_NAME=KCU.COLUMN_NAME
        )IsPrimaryKey
        FROM INFORMATION_SCHEMA.COLUMNS C
        WHERE C.TABLE_CATALOG=@CATALOG AND C.TABLE_SCHEMA=@SCHEMA AND C.TABLE_NAME=@NAME
        ORDER BY C.TABLE_CATALOG,C.TABLE_SCHEMA,C.TABLE_NAME,C.ORDINAL_POSITION
    ";
    public virtual string SQLPrimaryKey =>@"
        SELECT KCU.COLUMN_NAME
        FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
        JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CCU ON TC.CONSTRAINT_CATALOG=CCU.CONSTRAINT_CATALOG AND TC.CONSTRAINT_SCHEMA=CCU.CONSTRAINT_SCHEMA AND TC.TABLE_NAME=CCU.TABLE_NAME AND TC.CONSTRAINT_NAME=CCU.CONSTRAINT_NAME
        JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE        KCU ON CCU.CONSTRAINT_CATALOG=KCU.CONSTRAINT_CATALOG AND CCU.CONSTRAINT_SCHEMA=KCU.CONSTRAINT_SCHEMA AND CCU.TABLE_NAME=KCU.TABLE_NAME AND CCU.CONSTRAINT_NAME=KCU.CONSTRAINT_NAME AND CCU.COLUMN_NAME=KCU.COLUMN_NAME
        JOIN INFORMATION_SCHEMA.COLUMNS                 C   ON KCU.CONSTRAINT_CATALOG=C.TABLE_CATALOG AND KCU.CONSTRAINT_SCHEMA=C.TABLE_SCHEMA AND KCU.TABLE_NAME=C.TABLE_NAME AND KCU.COLUMN_NAME=C.COLUMN_NAME
        WHERE TC.CONSTRAINT_TYPE='PRIMARY KEY' AND TC.CONSTRAINT_SCHEMA=@SCHEMA AND TC.TABLE_NAME=@NAME
        ORDER BY C.ORDINAL_POSITION
    ";
    public virtual string SQL_ForeignKey =>@"
        SELECT DISTINCT
             TC_N.CONSTRAINT_NAME
            ,TC_1.TABLE_SCHEMA
            ,TC_1.TABLE_NAME
            ,TC_N.TABLE_SCHEMA
            ,TC_N.TABLE_NAME
        FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS       TC_N
        JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE        KCU_N ON TC_N .CONSTRAINT_CATALOG       =KCU_N.CONSTRAINT_CATALOG AND TC_N .CONSTRAINT_SCHEMA       =KCU_N.CONSTRAINT_SCHEMA AND TC_N .CONSTRAINT_NAME       =KCU_N.CONSTRAINT_NAME
        JOIN INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS RC_N  ON KCU_N.CONSTRAINT_CATALOG       =RC_N .CONSTRAINT_CATALOG AND KCU_N.CONSTRAINT_SCHEMA       =RC_N .CONSTRAINT_SCHEMA AND KCU_N.CONSTRAINT_NAME       =RC_N .CONSTRAINT_NAME
        JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS       TC_1  ON RC_N .UNIQUE_CONSTRAINT_CATALOG=TC_1 .CONSTRAINT_CATALOG AND RC_N .UNIQUE_CONSTRAINT_SCHEMA=TC_1 .CONSTRAINT_SCHEMA AND RC_N .UNIQUE_CONSTRAINT_NAME=TC_1 .CONSTRAINT_NAME
        JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CCU_1 ON TC_1 .CONSTRAINT_CATALOG       =CCU_1.CONSTRAINT_CATALOG AND TC_1 .CONSTRAINT_SCHEMA       =CCU_1.CONSTRAINT_SCHEMA AND TC_1 .CONSTRAINT_NAME       =CCU_1.CONSTRAINT_NAME
        JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE        KCU_1 ON CCU_1.CONSTRAINT_CATALOG       =KCU_1.CONSTRAINT_CATALOG AND CCU_1.CONSTRAINT_SCHEMA       =KCU_1.CONSTRAINT_SCHEMA AND CCU_1.CONSTRAINT_NAME       =KCU_1.CONSTRAINT_NAME
        WHERE TC_N.CONSTRAINT_TYPE='FOREIGN KEY'
        ORDER BY
             TC_N.CONSTRAINT_NAME
            ,TC_1.TABLE_SCHEMA
            ,TC_1.TABLE_NAME
            ,TC_N.TABLE_SCHEMA
            ,TC_N.TABLE_NAME
    ";
    public virtual string SQL_ForeignKey_Column =>@"
        SELECT
             多表.CONSTRAINT_NAME
            ,多表.TABLE_SCHEMA
            ,多表.TABLE_NAME
            ,多列.COLUMN_NAME
        FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS       多表
        JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE        多列 ON 多表.CONSTRAINT_CATALOG       =多列.CONSTRAINT_CATALOG AND 多表.CONSTRAINT_SCHEMA       =多列.CONSTRAINT_SCHEMA AND 多表.CONSTRAINT_NAME       =多列.CONSTRAINT_NAME
        JOIN INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS 参照 ON 多列.CONSTRAINT_CATALOG       =参照.CONSTRAINT_CATALOG AND 多列.CONSTRAINT_SCHEMA       =参照.CONSTRAINT_SCHEMA AND 多列.CONSTRAINT_NAME       =参照.CONSTRAINT_NAME
        JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS       一表 ON 参照.UNIQUE_CONSTRAINT_CATALOG=一表.CONSTRAINT_CATALOG AND 参照.UNIQUE_CONSTRAINT_SCHEMA=一表.CONSTRAINT_SCHEMA AND 参照.UNIQUE_CONSTRAINT_NAME=一表.CONSTRAINT_NAME
        JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE        一列 ON 一表.CONSTRAINT_CATALOG       =一列.CONSTRAINT_CATALOG AND 一表.CONSTRAINT_SCHEMA       =一列.CONSTRAINT_SCHEMA AND 一表.CONSTRAINT_NAME       =一列.CONSTRAINT_NAME AND 多列.ORDINAL_POSITION=一列.ORDINAL_POSITION
        JOIN INFORMATION_SCHEMA.COLUMNS                 順序 ON 一列.TABLE_CATALOG            =順序.TABLE_CATALOG      AND 一列.TABLE_SCHEMA            =順序.TABLE_SCHEMA      AND 一列.TABLE_NAME            =順序.TABLE_NAME      AND 一列.COLUMN_NAME     =順序.COLUMN_NAME
        ORDER BY
             一表.TABLE_SCHEMA
            ,一表.TABLE_NAME
            ,多表.TABLE_SCHEMA
            ,多表.TABLE_NAME
            ,順序.ORDINAL_POSITION;
    ";
}